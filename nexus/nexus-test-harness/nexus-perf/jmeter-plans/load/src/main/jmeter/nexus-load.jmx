<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Nexus Defaults" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="context" elementType="Argument">
            <stringProp name="Argument.name">context</stringProp>
            <stringProp name="Argument.value">${__P(nexus.context,/nexus)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">${__P(nexus.host,localhost)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">${__P(nexus.port,8081)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">${__P(nexus.protocol,http)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="groupName" elementType="Argument">
            <stringProp name="Argument.name">groupName</stringProp>
            <stringProp name="Argument.value">${__P(nexus.group,public)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="responseTimeout" elementType="Argument">
            <stringProp name="Argument.name">responseTimeout</stringProp>
            <stringProp name="Argument.value">${__P(nexus.responseTimeout,60000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="proxyHost" elementType="Argument">
            <stringProp name="Argument.name">proxyHost</stringProp>
            <stringProp name="Argument.value">${__P(nexus.proxyHost,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="proxyPort" elementType="Argument">
            <stringProp name="Argument.name">proxyPort</stringProp>
            <stringProp name="Argument.value">${__P(nexus.proxyPort,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="proxyUsername" elementType="Argument">
            <stringProp name="Argument.name">proxyUsername</stringProp>
            <stringProp name="Argument.value">${__P(nexus.proxyUsername,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="proxyPassword" elementType="Argument">
            <stringProp name="Argument.name">proxyPassword</stringProp>
            <stringProp name="Argument.value">${__P(nexus.proxyPassword,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="connectTimeout" elementType="Argument">
            <stringProp name="Argument.name">connectTimeout</stringProp>
            <stringProp name="Argument.value">${__P(nexus.connectTimeout,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="acceptHeader" elementType="Argument">
            <stringProp name="Argument.name">acceptHeader</stringProp>
            <stringProp name="Argument.value">${__P(nexus.acceptHeader,application/json)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="contentTypeHeader" elementType="Argument">
            <stringProp name="Argument.name">contentTypeHeader</stringProp>
            <stringProp name="Argument.value">${__P(nexus.contentTypeHeader,application/json)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="repoName" elementType="Argument">
            <stringProp name="Argument.name">repoName</stringProp>
            <stringProp name="Argument.value">${__P(nexus.repo,central)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">Default common Nexus test plan variables</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="External Resources" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="result.dir" elementType="Argument">
            <stringProp name="Argument.name">result.dir</stringProp>
            <stringProp name="Argument.value">${__P(result.dir,results)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="data.dir" elementType="Argument">
            <stringProp name="Argument.name">data.dir</stringProp>
            <stringProp name="Argument.value">${__P(data.dir,../resources)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="data.id" elementType="Argument">
            <stringProp name="Argument.name">data.id</stringProp>
            <stringProp name="Argument.value">${__P(data.id,default)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="fileEncoding" elementType="Argument">
            <stringProp name="Argument.name">fileEncoding</stringProp>
            <stringProp name="Argument.value">${__P(fileEncoding,UTF-8)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csvAllowQuotedData" elementType="Argument">
            <stringProp name="Argument.name">csvAllowQuotedData</stringProp>
            <stringProp name="Argument.value">${__P(csvAllowQuotedData,True)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csvRecycleOnEOF" elementType="Argument">
            <stringProp name="Argument.name">csvRecycleOnEOF</stringProp>
            <stringProp name="Argument.value">${__P(csvRecycleOnEOF,True)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csvStopOnEOF" elementType="Argument">
            <stringProp name="Argument.name">csvStopOnEOF</stringProp>
            <stringProp name="Argument.value">${__P(csvStopOnEOF,True)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">Define file paths as variables, using JMeter system properties as base</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Thread Details" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="auth.threads" elementType="Argument">
            <stringProp name="Argument.name">auth.threads</stringProp>
            <stringProp name="Argument.value">${__P(auth.threads,3)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="auth.rampup" elementType="Argument">
            <stringProp name="Argument.name">auth.rampup</stringProp>
            <stringProp name="Argument.value">${__P(auth.rampup,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="auth.loop" elementType="Argument">
            <stringProp name="Argument.name">auth.loop</stringProp>
            <stringProp name="Argument.value">${__P(auth.loop,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="auth.throughput" elementType="Argument">
            <stringProp name="Argument.name">auth.throughput</stringProp>
            <stringProp name="Argument.value">${__P(auth.throughput,50)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="auth.duration" elementType="Argument">
            <stringProp name="Argument.name">auth.duration</stringProp>
            <stringProp name="Argument.value">${__P(auth.duration,18000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="deploy.threads" elementType="Argument">
            <stringProp name="Argument.name">deploy.threads</stringProp>
            <stringProp name="Argument.value">${__P(deploy.threads,3)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="deploy.rampup" elementType="Argument">
            <stringProp name="Argument.name">deploy.rampup</stringProp>
            <stringProp name="Argument.value">${__P(deploy.rampup,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="deploy.loop" elementType="Argument">
            <stringProp name="Argument.name">deploy.loop</stringProp>
            <stringProp name="Argument.value">${__P(deploy.loop,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="deploy.throughput" elementType="Argument">
            <stringProp name="Argument.name">deploy.throughput</stringProp>
            <stringProp name="Argument.value">${__P(deploy.throughput,3)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="deploy.duration" elementType="Argument">
            <stringProp name="Argument.name">deploy.duration</stringProp>
            <stringProp name="Argument.value">${__P(deploy.duration,18000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="feed.threads" elementType="Argument">
            <stringProp name="Argument.name">feed.threads</stringProp>
            <stringProp name="Argument.value">${__P(feed.threads,3)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="feed.rampup" elementType="Argument">
            <stringProp name="Argument.name">feed.rampup</stringProp>
            <stringProp name="Argument.value">${__P(feed.rampup,3)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="feed.loop" elementType="Argument">
            <stringProp name="Argument.name">feed.loop</stringProp>
            <stringProp name="Argument.value">${__P(feed.loop,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="feed.throughput" elementType="Argument">
            <stringProp name="Argument.name">feed.throughput</stringProp>
            <stringProp name="Argument.value">${__P(feed.throughput,3)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="feed.duration" elementType="Argument">
            <stringProp name="Argument.name">feed.duration</stringProp>
            <stringProp name="Argument.value">${__P(feed.duration,18000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="repocontent.threads" elementType="Argument">
            <stringProp name="Argument.name">repocontent.threads</stringProp>
            <stringProp name="Argument.value">${__P(repocontent.threads,80)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="repocontent.rampup" elementType="Argument">
            <stringProp name="Argument.name">repocontent.rampup</stringProp>
            <stringProp name="Argument.value">${__P(repocontent.rampup,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="repocontent.loop" elementType="Argument">
            <stringProp name="Argument.name">repocontent.loop</stringProp>
            <stringProp name="Argument.value">${__P(repocontent.loop,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mseinstall.threads" elementType="Argument">
            <stringProp name="Argument.name">mseinstall.threads</stringProp>
            <stringProp name="Argument.value">${__P(mseinstall.threads,3)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mseinstall.rampup" elementType="Argument">
            <stringProp name="Argument.name">mseinstall.rampup</stringProp>
            <stringProp name="Argument.value">${__P(mseinstall.rampup,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mseinstall.loop" elementType="Argument">
            <stringProp name="Argument.name">mseinstall.loop</stringProp>
            <stringProp name="Argument.value">${__P(mseinstall.loop,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mseinstall.throughput" elementType="Argument">
            <stringProp name="Argument.name">mseinstall.throughput</stringProp>
            <stringProp name="Argument.value">${__P(mseinstall.throughput,50)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mseinstall.duration" elementType="Argument">
            <stringProp name="Argument.name">mseinstall.duration</stringProp>
            <stringProp name="Argument.value">${__P(mseinstall.duration,18000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">Variables for configuring thread pools, throughput controllers, etc. - anything that controls or manipulates thread execution</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Test Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="numFakeUsers" elementType="Argument">
            <stringProp name="Argument.name">numFakeUsers</stringProp>
            <stringProp name="Argument.value">${__P(numFakeUsers,5)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">Test plan specific variables, define as child of test plan root instead of in root directly to allow override and evaluation of existing variables</stringProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${host}</stringProp>
        <stringProp name="HTTPSampler.port">${port}</stringProp>
        <stringProp name="HTTPSampler.proxyHost">${proxyHost}</stringProp>
        <stringProp name="HTTPSampler.proxyPort">${proxyPort}</stringProp>
        <stringProp name="HTTPSampler.proxyUser">${proxyUsername}</stringProp>
        <stringProp name="HTTPSampler.proxyPass">${proxyPassword}</stringProp>
        <stringProp name="HTTPSampler.connect_timeout">${connectTimeout}</stringProp>
        <stringProp name="HTTPSampler.response_timeout">${responseTimeout}</stringProp>
        <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">${context}</stringProp>
        <stringProp name="TestPlan.comments">The standard defaults for HTTP Requests in any test plan</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Auth" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${auth.threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${auth.rampup}</stringProp>
        <longProp name="ThreadGroup.start_time">1288061702000</longProp>
        <longProp name="ThreadGroup.end_time">1288061702000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${auth.duration}</stringProp>
        <stringProp name="ThreadGroup.delay">${auth.delay}</stringProp>
        <stringProp name="TestPlan.comments">Delete previously created users, Create new set of users, login/logout as new set of users.</stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="AJAX JSON Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.2.11) Gecko/20101012 Firefox/3.6.11</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-us,en;q=0.5</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip,deflate</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept-Charset</stringProp>
              <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.7</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Headers that are typically sent from a user&apos;s web browser to Nexus backend</stringProp>
        </HeaderManager>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Delete Users" enabled="true">
          <stringProp name="TestPlan.comments">Delete any previous automatcially created users</stringProp>
        </OnceOnlyController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${numFakeUsers}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="deleteUserCount" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">${numFakeUsers}</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">deleteUserCount</stringProp>
              <stringProp name="CounterConfig.format">0000</stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Delete User" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="2108044882">Common Modules</stringProp>
                <stringProp name="-646160747">Service</stringProp>
                <stringProp name="82025960">Users</stringProp>
                <stringProp name="-1982705428">Dynamic Delete</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Create Users" enabled="true">
          <stringProp name="TestPlan.comments">We want to preload nexus with some users to log in as</stringProp>
        </OnceOnlyController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${numFakeUsers}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="createUserCount" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">${numFakeUsers}</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">createUserCount</stringProp>
              <stringProp name="CounterConfig.format">0000</stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="2108044882">Common Modules</stringProp>
                <stringProp name="-646160747">Service</stringProp>
                <stringProp name="82025960">Users</stringProp>
                <stringProp name="1628978456">Dynamic Create  &gt;= 1.9</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="userCounter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end">${numFakeUsers}</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">userCounter</stringProp>
          <stringProp name="CounterConfig.format">0000</stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
          <stringProp name="TestPlan.comments">Counter to uniquely identify users that have been loaded into the system.</stringProp>
        </CounterConfig>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="_dc" enabled="true">
          <stringProp name="CounterConfig.start">0</stringProp>
          <stringProp name="CounterConfig.end">999999999999</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">_dc</stringProp>
          <stringProp name="CounterConfig.format">0000000000000</stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
          <stringProp name="TestPlan.comments">_dc is a common Nexus parameter sent to avoid retrieving cached data at duplicate urls. it is merely a timestamp millis but here we use a counter to same effect</stringProp>
        </CounterConfig>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">${protocol}://${host}:${port}${context}/service/local/users</stringProp>
              <stringProp name="Authorization.username">admin</stringProp>
              <stringProp name="Authorization.password">admin123</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">${protocol}://${host}:${port}${context}/service/local/authentication</stringProp>
              <stringProp name="Authorization.username">user${__threadNum}-${userCounter}</stringProp>
              <stringProp name="Authorization.password">123</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Disable preemptive auth: jmeter -Jhttpclient.parameters.file=httpclient.parameters and httpclient.parameters should contain http.authentication.preemptive$Boolean=false</stringProp>
        </AuthManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Login Logout" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Login" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="2108044882">Common Modules</stringProp>
              <stringProp name="-646160747">Service</stringProp>
              <stringProp name="-571560296">Authentication</stringProp>
              <stringProp name="73596745">Login</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Pause" enabled="true">
            <stringProp name="TestPlan.comments">Random pause before logging out.</stringProp>
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${__Random(4000,5000,)}</stringProp>
          </TestAction>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Logout" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="2108044882">Common Modules</stringProp>
              <stringProp name="-646160747">Service</stringProp>
              <stringProp name="-571560296">Authentication</stringProp>
              <stringProp name="-2013462102">Logout</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Deploy Fake POMs" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${deploy.threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${deploy.rampup}</stringProp>
        <longProp name="ThreadGroup.start_time">1286198441000</longProp>
        <longProp name="ThreadGroup.end_time">1286198441000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${deploy.duration}</stringProp>
        <stringProp name="ThreadGroup.delay">${deploy.delay}</stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Maven 3 Request Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Apache-Maven/3.0 (Java 1.6.0_20; Mac OS X 10.5.8)</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">threadNum</stringProp>
              <stringProp name="Header.value">${__threadNum}</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Headers that Maven sends when requesting an artifact from a repository</stringProp>
        </HeaderManager>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">${protocol}://${host}:${port}${context}</stringProp>
              <stringProp name="Authorization.username">admin</stringProp>
              <stringProp name="Authorization.password">admin123</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Disable preemptive auth: jmeter -Jhttpclient.parameters.file=httpclient.parameters and httpclient.parameters should contain http.authentication.preemptive$Boolean=false</stringProp>
        </AuthManager>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="versionCounter" enabled="true">
          <stringProp name="CounterConfig.start">0</stringProp>
          <stringProp name="CounterConfig.end">999999999999</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">versionCounter</stringProp>
          <stringProp name="CounterConfig.format">000000000000</stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
          <stringProp name="TestPlan.comments">used when constructing the pom version for deployment per thread</stringProp>
        </CounterConfig>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="3496818">repo</stringProp>
            <stringProp name="-384506541">resourcePath</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-278517231">
              <stringProp name="-940384801">thirdparty</stringProp>
              <stringProp name="-530173329">/thirdparty/foo${__threadNum}/bar${__time(HMS,)}/1.${__threadNum}.${versionCounter}/bar-1.${__threadNum}.${versionCounter}.pom</stringProp>
            </collectionProp>
            <collectionProp name="-1974050753">
              <stringProp name="-551298740">releases</stringProp>
              <stringProp name="1588580898">/releases/foo${__threadNum}/bar${__time(HMS,)}/1.${__threadNum}.${versionCounter}/bar-1.${__threadNum}.${versionCounter}.pom</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
          <stringProp name="TestPlan.comments">Define repositories and artifact GAV to deploy too - make sure repos allow redeploy of artifacts</stringProp>
        </UserParameters>
        <hashTree/>
        <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="PUT" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${context}/content/repositories/thirdparty/foo/bar/1.${__threadNum}.${versionCounter}/bar-1.${__threadNum}.${versionCounter}.pom</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name"></stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${context}/content/repositories/${repo}/foo/bar/1.${__threadNum}.${versionCounter}/bar-1.${__threadNum}.${versionCounter}.pom</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSampler2>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 201" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Deploy Fake Pom" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="-1227702913">WorkBench</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="2108044882">Common Modules</stringProp>
            <stringProp name="-1678783399">Content</stringProp>
            <stringProp name="-2016914040">Repositories</stringProp>
            <stringProp name="151252232">PUT Fake Resource</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Feed Reader" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${feed.threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${feed.rampup}</stringProp>
        <longProp name="ThreadGroup.start_time">1288061702000</longProp>
        <longProp name="ThreadGroup.end_time">1288061702000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${feed.duration}</stringProp>
        <stringProp name="ThreadGroup.delay">${feed.delay}</stringProp>
      </ThreadGroup>
      <hashTree>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">${protocol}://${host}:${port}${context}</stringProp>
              <stringProp name="Authorization.username">admin</stringProp>
              <stringProp name="Authorization.password">admin123</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Disable preemptive auth: jmeter -Jhttpclient.parameters.file=httpclient.parameters and httpclient.parameters should contain http.authentication.preemptive$Boolean=false</stringProp>
        </AuthManager>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Interleave All" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="-1227702913">WorkBench</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="2108044882">Common Modules</stringProp>
            <stringProp name="-646160747">Service</stringProp>
            <stringProp name="67755637">Feeds</stringProp>
            <stringProp name="-1085190888">All Interleave Alpha</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Repo Content" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${repocontent.threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${repocontent.rampup}</stringProp>
        <longProp name="ThreadGroup.start_time">1288061702000</longProp>
        <longProp name="ThreadGroup.end_time">1288061702000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${repocontent.duration}</stringProp>
        <stringProp name="ThreadGroup.delay">${repocontent.delay}</stringProp>
        <stringProp name="TestPlan.comments">List content for a repo</stringProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Walk Local Storage Tree" enabled="true">
          <stringProp name="TestPlan.comments">Use module controllers to reference common modules</stringProp>
          <collectionProp name="ModuleController.node_path">
            <stringProp name="-1227702913">WorkBench</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="2108044882">Common Modules</stringProp>
            <stringProp name="-646160747">Service</stringProp>
            <stringProp name="-2016914040">Repositories</stringProp>
            <stringProp name="-1678783399">Content</stringProp>
            <stringProp name="-130629457">Walk Local Storage Tree</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Dependency Report" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${dependency.loop}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${dependency.threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${dependency.rampup}</stringProp>
        <longProp name="ThreadGroup.start_time">1286198441000</longProp>
        <longProp name="ThreadGroup.end_time">1286198441000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${dependency.duration}</stringProp>
        <stringProp name="ThreadGroup.delay">${dependency.delay}</stringProp>
        <stringProp name="TestPlan.comments">retrieve dependency info</stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="artifacts.csv" enabled="true">
          <stringProp name="TestPlan.comments">artifact data suitable for a dependency report service call</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">${fileEncoding}</stringProp>
          <stringProp name="filename">${data.dir}/artifacts.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">All threads</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">g,a,v,c,e,f,s,r</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="_dc" enabled="true">
          <stringProp name="CounterConfig.start">0</stringProp>
          <stringProp name="CounterConfig.end">999999999999</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">_dc</stringProp>
          <stringProp name="CounterConfig.format">0000000000000</stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
          <stringProp name="TestPlan.comments">_dc is a common Nexus parameter sent to avoid retrieving cached data at duplicate urls. it is merely a timestamp millis but here we use a counter to same effect</stringProp>
        </CounterConfig>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="GET" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="-1227702913">WorkBench</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="2108044882">Common Modules</stringProp>
            <stringProp name="-646160747">Service</stringProp>
            <stringProp name="1967173483">Dependency</stringProp>
            <stringProp name="-1564585070">GET JSON</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Eclipse MSE artifacts.xml" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${mseinstall.threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${mseinstall.rampup}</stringProp>
        <longProp name="ThreadGroup.start_time">1288061702000</longProp>
        <longProp name="ThreadGroup.end_time">1288061702000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${mseinstall.duration}</stringProp>
        <stringProp name="ThreadGroup.delay">${mseinstall.delay}</stringProp>
        <stringProp name="TestPlan.comments">Exercise the P2 Plugin artifacts.xml metadata</stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Eclipse Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">max-age=0</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Jakarta Commons-HttpClient/3.1</stringProp>
            </elementProp>
            <elementProp name="Accept-encoding" elementType="Header">
              <stringProp name="Header.name">Accept-encoding</stringProp>
              <stringProp name="Header.value">gzip</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Eclipse IDE headers when requesting bits from a P2 Repository, gzip is only suitable for xml files but shouldn&apos;t hurt otherwise</stringProp>
        </HeaderManager>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="3496818">repo</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1214092943">
              <stringProp name="-1033489156">nx-mse</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
          <stringProp name="TestPlan.comments">thread variables</stringProp>
        </UserParameters>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="MSE artifacts.xml" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="-1227702913">WorkBench</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="2108044882">Common Modules</stringProp>
            <stringProp name="-1678783399">Content</stringProp>
            <stringProp name="-2016914040">Repositories</stringProp>
            <stringProp name="12427913">MSE artifacts.xml</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Eclipse MSE content.xml" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${mseinstall.threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${mseinstall.rampup}</stringProp>
        <longProp name="ThreadGroup.start_time">1288061702000</longProp>
        <longProp name="ThreadGroup.end_time">1288061702000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${mseinstall.duration}</stringProp>
        <stringProp name="ThreadGroup.delay">${mseinstall.delay}</stringProp>
        <stringProp name="TestPlan.comments">Exercise the P2 Plugin content.xml metadata</stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Eclipse Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">max-age=0</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Jakarta Commons-HttpClient/3.1</stringProp>
            </elementProp>
            <elementProp name="Accept-encoding" elementType="Header">
              <stringProp name="Header.name">Accept-encoding</stringProp>
              <stringProp name="Header.value">gzip</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Eclipse IDE headers when requesting bits from a P2 Repository, gzip is only suitable for xml files but shouldn&apos;t hurt otherwise</stringProp>
        </HeaderManager>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="3496818">repo</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1214092943">
              <stringProp name="-1033489156">nx-mse</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
          <stringProp name="TestPlan.comments">thread variables</stringProp>
        </UserParameters>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="MSE content.xml" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="-1227702913">WorkBench</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="2108044882">Common Modules</stringProp>
            <stringProp name="-1678783399">Content</stringProp>
            <stringProp name="-2016914040">Repositories</stringProp>
            <stringProp name="1781123553">MSE content.xml</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Eclipse MSE Install" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${mseinstall.threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${mseinstall.rampup}</stringProp>
        <longProp name="ThreadGroup.start_time">1288061702000</longProp>
        <longProp name="ThreadGroup.end_time">1288061702000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${mseinstall.duration}</stringProp>
        <stringProp name="ThreadGroup.delay">${mseinstall.delay}</stringProp>
        <stringProp name="TestPlan.comments">Exercise the P2 Plugin Repository simulating Eclipse installing MSE from it.</stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Eclipse Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">max-age=0</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Jakarta Commons-HttpClient/3.1</stringProp>
            </elementProp>
            <elementProp name="Accept-encoding" elementType="Header">
              <stringProp name="Header.name">Accept-encoding</stringProp>
              <stringProp name="Header.value">gzip</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Eclipse IDE headers when requesting bits from a P2 Repository, gzip is only suitable for xml files but shouldn&apos;t hurt otherwise</stringProp>
        </HeaderManager>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="3496818">repo</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1214092943">
              <stringProp name="-1033489156">nx-mse</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
          <stringProp name="TestPlan.comments">thread variables</stringProp>
        </UserParameters>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="MSE Metadata" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="-1227702913">WorkBench</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="2108044882">Common Modules</stringProp>
            <stringProp name="-1678783399">Content</stringProp>
            <stringProp name="-2016914040">Repositories</stringProp>
            <stringProp name="-537530640">MSE Metadata</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="MSE Install" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="-1227702913">WorkBench</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="2108044882">Common Modules</stringProp>
            <stringProp name="-1678783399">Content</stringProp>
            <stringProp name="-2016914040">Repositories</stringProp>
            <stringProp name="1244398298">MSE Install 1.8.0.1</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="mse.csv" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding">${fileEncoding}</stringProp>
            <stringProp name="filename">${data.dir}/mse.csv</stringProp>
            <stringProp name="quotedData">${csvAllowQuotedData}</stringProp>
            <stringProp name="recycle">${csvRecycleOnEOF}</stringProp>
            <stringProp name="shareMode">Current thread</stringProp>
            <stringProp name="stopThread">${csvStopOnEOF}</stringProp>
            <stringProp name="variableNames">resourcePath,httpMethod</stringProp>
            <stringProp name="TestPlan.comments">resourcePaths for the resources to get to simulate a complete Eclipse MSE installation</stringProp>
          </CSVDataSet>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If HEAD" enabled="true">
            <stringProp name="IfController.condition">${__jexl(&quot;HEAD&quot; == &quot;${__log(${httpMethod},,,)}&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="HEAD Resource" enabled="true">
              <stringProp name="TestPlan.comments">Use module controllers to reference common modules</stringProp>
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="2108044882">Common Modules</stringProp>
                <stringProp name="-1678783399">Content</stringProp>
                <stringProp name="-2016914040">Repositories</stringProp>
                <stringProp name="1365433966">HEAD Resource</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If GET" enabled="true">
            <stringProp name="IfController.condition"> ${__jexl(&quot;GET&quot; == &quot;${__log(${httpMethod},,,)}&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="GET Resource" enabled="true">
              <stringProp name="TestPlan.comments">Use module controllers to reference common modules</stringProp>
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="2108044882">Common Modules</stringProp>
                <stringProp name="-1678783399">Content</stringProp>
                <stringProp name="-2016914040">Repositories</stringProp>
                <stringProp name="-468307496">GET Resource</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <Summariser guiclass="SummariserGui" testclass="Summariser" testname="Summary Console" enabled="true"/>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename">${data.dir}/summary.jtl</stringProp>
        <boolProp name="useGroupName">true</boolProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Common Modules" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1286198052000</longProp>
        <longProp name="ThreadGroup.end_time">1286198052000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TEST PLAN TEMPLATE" enabled="true">
          <stringProp name="TestPlan.comments">Nodes under this template can be copied to start a typical JMeter test plan</stringProp>
        </GenericController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Nexus Defaults" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="context" elementType="Argument">
                <stringProp name="Argument.name">context</stringProp>
                <stringProp name="Argument.value">${__P(nexus.context,/nexus)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="host" elementType="Argument">
                <stringProp name="Argument.name">host</stringProp>
                <stringProp name="Argument.value">${__P(nexus.host,localhost)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="port" elementType="Argument">
                <stringProp name="Argument.name">port</stringProp>
                <stringProp name="Argument.value">${__P(nexus.port,8081)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="protocol" elementType="Argument">
                <stringProp name="Argument.name">protocol</stringProp>
                <stringProp name="Argument.value">${__P(nexus.protocol,http)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="group" elementType="Argument">
                <stringProp name="Argument.name">group</stringProp>
                <stringProp name="Argument.value">${__P(nexus.group,public)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="responseTimeout" elementType="Argument">
                <stringProp name="Argument.name">responseTimeout</stringProp>
                <stringProp name="Argument.value">${__P(nexus.responseTimeout,60000)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="proxyHost" elementType="Argument">
                <stringProp name="Argument.name">proxyHost</stringProp>
                <stringProp name="Argument.value">${__P(nexus.proxyHost,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="proxyPort" elementType="Argument">
                <stringProp name="Argument.name">proxyPort</stringProp>
                <stringProp name="Argument.value">${__P(nexus.proxyPort,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="proxyUsername" elementType="Argument">
                <stringProp name="Argument.name">proxyUsername</stringProp>
                <stringProp name="Argument.value">${__P(nexus.proxyUsername,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="proxyPassword" elementType="Argument">
                <stringProp name="Argument.name">proxyPassword</stringProp>
                <stringProp name="Argument.value">${__P(nexus.proxyPassword,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="connectTimeout" elementType="Argument">
                <stringProp name="Argument.name">connectTimeout</stringProp>
                <stringProp name="Argument.value">${__P(nexus.connectTimeout,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Default common Nexus test plan variables</stringProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="External Resources" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="result.dir" elementType="Argument">
                <stringProp name="Argument.name">result.dir</stringProp>
                <stringProp name="Argument.value">${__P(result.dir,results)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="data.dir" elementType="Argument">
                <stringProp name="Argument.name">data.dir</stringProp>
                <stringProp name="Argument.value">${__P(data.dir,/Users/plynch/dev/sonatype/org/nexus/trunk/nexus/nexus-test-harness/nexus-perf/jmeter-plans/maven-builds/src/main/resources)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="data.id" elementType="Argument">
                <stringProp name="Argument.name">data.id</stringProp>
                <stringProp name="Argument.value">${__P(data.id,default)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="fileEncoding" elementType="Argument">
                <stringProp name="Argument.name">fileEncoding</stringProp>
                <stringProp name="Argument.value">${__P(fileEncoding,UTF-8)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Define file paths as variables, using JMeter system properties as base</stringProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Thread Details" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="deploy.threads" elementType="Argument">
                <stringProp name="Argument.name">deploy.threads</stringProp>
                <stringProp name="Argument.value">${__P(deploy.threads,10)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="deploy.rampup" elementType="Argument">
                <stringProp name="Argument.name">deploy.rampup</stringProp>
                <stringProp name="Argument.value">${__P(deploy.rampup,1)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="deploy.loop" elementType="Argument">
                <stringProp name="Argument.name">deploy.loop</stringProp>
                <stringProp name="Argument.value">${__P(deploy.loop,50000)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="deploy.throughput" elementType="Argument">
                <stringProp name="Argument.name">deploy.throughput</stringProp>
                <stringProp name="Argument.value">${__P(deploy.throughput,50)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="deploy.duration" elementType="Argument">
                <stringProp name="Argument.name">deploy.duration</stringProp>
                <stringProp name="Argument.value">${__P(deploy.duration,1)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Variables for configuring thread pools, throughput controllers, etc. - anything that controls or manipulates thread execution</stringProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Test Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
            <stringProp name="TestPlan.comments">Test plan specific variables, define as child of test plan root instead of in root directly to allow override and evaluation of existing variables</stringProp>
          </Arguments>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="AJAX JSON Headers" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.2.11) Gecko/20101012 Firefox/3.6.11</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-us,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Charset</stringProp>
                <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.7</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Headers that are typically sent from a user&apos;s web browser to Nexus backend</stringProp>
          </HeaderManager>
          <hashTree/>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.proxyHost">${proxyHost}</stringProp>
            <stringProp name="HTTPSampler.proxyPort">${proxyPort}</stringProp>
            <stringProp name="HTTPSampler.proxyUser">${proxyUsername}</stringProp>
            <stringProp name="HTTPSampler.proxyPass">${proxyPassword}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">${connectTimeout}</stringProp>
            <stringProp name="HTTPSampler.response_timeout">${responseTimeout}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${context}</stringProp>
            <stringProp name="TestPlan.comments">The standard defaults for HTTP Requests in any test plan</stringProp>
          </ConfigTestElement>
          <hashTree/>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">${protocol}://${host}:${port}${context}</stringProp>
                <stringProp name="Authorization.username">admin</stringProp>
                <stringProp name="Authorization.password">admin123</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Disable preemptive auth: jmeter -Jhttpclient.parameters.file=httpclient.properties and httpclient.properties should contain http.authentication.preemptive$Boolean=false</stringProp>
          </AuthManager>
          <hashTree/>
          <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Example" enabled="true">
            <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
            <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">false</boolProp>
              <stringProp name="LoopController.loops">${example.loop}</stringProp>
            </elementProp>
            <stringProp name="ThreadGroup.num_threads">${example.threads}</stringProp>
            <stringProp name="ThreadGroup.ramp_time">${example.rampup}</stringProp>
            <longProp name="ThreadGroup.start_time">1288061702000</longProp>
            <longProp name="ThreadGroup.end_time">1288061702000</longProp>
            <boolProp name="ThreadGroup.scheduler">false</boolProp>
            <stringProp name="ThreadGroup.duration">${example.duration}</stringProp>
            <stringProp name="ThreadGroup.delay">${example.delay}</stringProp>
          </ThreadGroup>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names"/>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1"/>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
              <stringProp name="TestPlan.comments">thread variables</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
              <stringProp name="TestPlan.comments">Use module controllers to reference common modules</stringProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <Summariser guiclass="SummariserGui" testclass="Summariser" testname="Summary Console" enabled="true"/>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Util" enabled="true">
          <stringProp name="TestPlan.comments">General utilities for test reusability</stringProp>
        </GenericController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Test Plan" enabled="true">
            <stringProp name="TestPlan.comments"> Common Test Plan elements for all test plans usually at the test plan root</stringProp>
          </GenericController>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Nexus Defaults" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="context" elementType="Argument">
                  <stringProp name="Argument.name">context</stringProp>
                  <stringProp name="Argument.value">${__P(nexus.context,/nexus)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="host" elementType="Argument">
                  <stringProp name="Argument.name">host</stringProp>
                  <stringProp name="Argument.value">${__P(nexus.host,localhost)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="port" elementType="Argument">
                  <stringProp name="Argument.name">port</stringProp>
                  <stringProp name="Argument.value">${__P(nexus.port,8081)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="protocol" elementType="Argument">
                  <stringProp name="Argument.name">protocol</stringProp>
                  <stringProp name="Argument.value">${__P(nexus.protocol,http)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="group" elementType="Argument">
                  <stringProp name="Argument.name">group</stringProp>
                  <stringProp name="Argument.value">${__P(nexus.group,public)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="responseTimeout" elementType="Argument">
                  <stringProp name="Argument.name">responseTimeout</stringProp>
                  <stringProp name="Argument.value">${__P(nexus.responseTimeout,60000)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="proxyHost" elementType="Argument">
                  <stringProp name="Argument.name">proxyHost</stringProp>
                  <stringProp name="Argument.value">${__P(nexus.proxyHost,)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="proxyPort" elementType="Argument">
                  <stringProp name="Argument.name">proxyPort</stringProp>
                  <stringProp name="Argument.value">${__P(nexus.proxyPort,)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="proxyUsername" elementType="Argument">
                  <stringProp name="Argument.name">proxyUsername</stringProp>
                  <stringProp name="Argument.value">${__P(nexus.proxyUsername,)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="proxyPassword" elementType="Argument">
                  <stringProp name="Argument.name">proxyPassword</stringProp>
                  <stringProp name="Argument.value">${__P(nexus.proxyPassword,)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="connectTimeout" elementType="Argument">
                  <stringProp name="Argument.name">connectTimeout</stringProp>
                  <stringProp name="Argument.value">${__P(nexus.connectTimeout,)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Default common Nexus test plan variables</stringProp>
            </Arguments>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="External Resources" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="result.dir" elementType="Argument">
                  <stringProp name="Argument.name">result.dir</stringProp>
                  <stringProp name="Argument.value">${__P(result.dir,results)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="data.dir" elementType="Argument">
                  <stringProp name="Argument.name">data.dir</stringProp>
                  <stringProp name="Argument.value">${__P(data.dir,/Users/plynch/dev/sonatype/org/nexus/trunk/nexus/nexus-test-harness/nexus-perf/jmeter-plans/maven-builds/src/main/resources)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="data.id" elementType="Argument">
                  <stringProp name="Argument.name">data.id</stringProp>
                  <stringProp name="Argument.value">${__P(data.id,default)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fileEncoding" elementType="Argument">
                  <stringProp name="Argument.name">fileEncoding</stringProp>
                  <stringProp name="Argument.value">${__P(fileEncoding,UTF-8)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Define file paths as variables, using JMeter system properties as base</stringProp>
            </Arguments>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Threads" enabled="true">
            <stringProp name="TestPlan.comments">Elements that are used under thread groups or otherwise thread related</stringProp>
          </GenericController>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Thread Details" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="deploy.threads" elementType="Argument">
                  <stringProp name="Argument.name">deploy.threads</stringProp>
                  <stringProp name="Argument.value">${__P(deploy.threads,10)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="deploy.rampup" elementType="Argument">
                  <stringProp name="Argument.name">deploy.rampup</stringProp>
                  <stringProp name="Argument.value">${__P(deploy.rampup,1)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="deploy.loop" elementType="Argument">
                  <stringProp name="Argument.name">deploy.loop</stringProp>
                  <stringProp name="Argument.value">${__P(deploy.loop,50000)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="deploy.throughput" elementType="Argument">
                  <stringProp name="Argument.name">deploy.throughput</stringProp>
                  <stringProp name="Argument.value">${__P(deploy.throughput,50)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="deploy.duration" elementType="Argument">
                  <stringProp name="Argument.name">deploy.duration</stringProp>
                  <stringProp name="Argument.value">${__P(deploy.duration,1)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Variables for configuring thread pools, throughput controllers, etc. - anything that controls or manipulates thread execution</stringProp>
            </Arguments>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Test Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
              <stringProp name="TestPlan.comments">Test plan specific variables, define as child of test plan root instead of in root node directly to allow override and evaluation of existing variables</stringProp>
            </Arguments>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="versionCounter" enabled="true">
              <stringProp name="CounterConfig.start">0</stringProp>
              <stringProp name="CounterConfig.end">999999999999</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">versionCounter</stringProp>
              <stringProp name="CounterConfig.format">000000000000</stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <stringProp name="TestPlan.comments">Use when constructing random urls requiring unque artifact versions and order has no effect on processing</stringProp>
            </CounterConfig>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="_dc" enabled="true">
              <stringProp name="CounterConfig.start">0</stringProp>
              <stringProp name="CounterConfig.end">999999999999</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">_dc</stringProp>
              <stringProp name="CounterConfig.format">0000000000000</stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <stringProp name="TestPlan.comments">_dc is a common Nexus parameter sent to avoid retrieving cached data at duplicate urls. it is merely a timestamp millis but here we use a counter to same effect</stringProp>
            </CounterConfig>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="sample.csv" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding">${fileEncoding}</stringProp>
              <stringProp name="filename">${data.dir}/sample.csv</stringProp>
              <stringProp name="quotedData">${csvAllowQuotedData}</stringProp>
              <stringProp name="recycle">${csvRecycleOnEOF}</stringProp>
              <stringProp name="shareMode">Current thread</stringProp>
              <stringProp name="stopThread">${csvStopOnEOF}</stringProp>
              <stringProp name="variableNames">g,a,v,c,e,f,s,r</stringProp>
            </CSVDataSet>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Reports" enabled="true">
            <stringProp name="TestPlan.comments">Common Listeners</stringProp>
          </GenericController>
          <hashTree>
            <Summariser guiclass="SummariserGui" testclass="Summariser" testname="Summary Console" enabled="true"/>
            <hashTree/>
            <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>false</assertions>
                  <subresults>false</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>false</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <threadCounts>true</threadCounts>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
              <boolProp name="useGroupName">true</boolProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>true</xml>
                  <fieldNames>false</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>true</xml>
                  <fieldNames>false</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Assertions" enabled="true"/>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 404" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51512">404</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="HTTP" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Headers" enabled="true">
            <stringProp name="TestPlan.comments">Container for common sets of headers. Copy header sets from this module to your test.</stringProp>
          </GenericController>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User-Agent" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="uaFirefox" elementType="Argument">
                  <stringProp name="Argument.name">uaFirefox</stringProp>
                  <stringProp name="Argument.value">Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.2.11) Gecko/20101012 Firefox/3.6.11</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="uaChrome" elementType="Argument">
                  <stringProp name="Argument.name">uaChrome</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="uaMaven3x" elementType="Argument">
                  <stringProp name="Argument.name">uaMaven3x</stringProp>
                  <stringProp name="Argument.value">Apache-Maven/3.0 (Java 1.6.0_20; Mac OS X 10.5.8)</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="uaJava" elementType="Argument">
                  <stringProp name="Argument.name">uaJava</stringProp>
                  <stringProp name="Argument.value">Java/1.6.0_20</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Common user agent strings for reference only - in other words, explicitly add your user agent string to your headers config don&apos;t try to reference these as variables</stringProp>
            </Arguments>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="AJAX JSON Headers Basic" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.2.11) Gecko/20101012 Firefox/3.6.11</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-us,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Charset</stringProp>
                  <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.7</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Headers that are typically sent from a user&apos;s web browser to Nexus backend</stringProp>
            </HeaderManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="AJAX JSON Headers POST/PUT" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Headers that are typically sent from a user&apos;s web browser to Nexus backend</stringProp>
            </HeaderManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="AJAX XML Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/xml</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">${uaFirefox}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-us,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Charset</stringProp>
                  <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.7</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/xml</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Headers that are typically sent from a user&apos;s web browser to Nexus backend</stringProp>
            </HeaderManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Eclipse Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Jakarta Commons-HttpClient/3.1</stringProp>
                </elementProp>
                <elementProp name="Accept-encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Useful to simulate requests from Eclipse IDE when requesting bits from a P2 Repository</stringProp>
            </HeaderManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Maven 2x Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Java/1.6.0_20</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">threadNum</stringProp>
                  <stringProp name="Header.value">${__threadNum}</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Headers that Maven sends when requesting an artifact from a repository</stringProp>
            </HeaderManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Maven 3x Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">${uaMaven3x}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">threadNum</stringProp>
                  <stringProp name="Header.value">${__threadNum}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${host}:${port}</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Headers that are typically sent from a user&apos;s web browser to Nexus backend</stringProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <stringProp name="TestPlan.comments">Handle cookies like a typical browser</stringProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.proxyHost">${proxyHost}</stringProp>
            <stringProp name="HTTPSampler.proxyPort">${proxyPort}</stringProp>
            <stringProp name="HTTPSampler.proxyUser">${proxyUsername}</stringProp>
            <stringProp name="HTTPSampler.proxyPass">${proxyPassword}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">${connectTimeout}</stringProp>
            <stringProp name="HTTPSampler.response_timeout">${responseTimeout}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${context}</stringProp>
            <stringProp name="TestPlan.comments">The standard defaults for HTTP Requests in any test plan</stringProp>
          </ConfigTestElement>
          <hashTree/>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">${protocol}://${host}:${port}${context}</stringProp>
                <stringProp name="Authorization.username">admin</stringProp>
                <stringProp name="Authorization.password">admin123</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Disable preemptive auth: jmeter -Jhttpclient.parameters.file=httpclient.properties and httpclient.properties should contain http.authentication.preemptive$Boolean=false</stringProp>
          </AuthManager>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Content" enabled="true">
          <stringProp name="TestPlan.comments">/nexus/content</stringProp>
        </GenericController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Groups" enabled="true">
            <stringProp name="TestPlan.comments">/nexus/content/groups</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="GET Resource" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${context}/content/groups/${group}${resourcePath}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSampler2>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Repositories" enabled="true">
            <stringProp name="TestPlan.comments">/nexus/content/repositories</stringProp>
          </GenericController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PUT Fake Resource" enabled="true"/>
            <hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="PUT Fake Resource" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${context}/content/repositories/${repo}${resourcePath}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${context}/content/repositories/${repo}${resourcePath}</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">mainly for PUT dummy content, param values build the content body for a PUT, useful for simulating deploys of fake pom files</stringProp>
              </HTTPSampler2>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 201" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49587">201</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PUT File Resource" enabled="true"/>
            <hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="PUT File Resource" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${context}/content/repositories/${repo}${resourcePath}</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="${repoLocal}/${resourcePath}" elementType="HTTPFileArg">
                      <stringProp name="File.path">${repoLocal}/${resourcePath}</stringProp>
                      <stringProp name="File.paramname"></stringProp>
                      <stringProp name="File.mimetype"></stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSampler2>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 201" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49587">201</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GET Resource" enabled="true"/>
            <hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="GET Resource" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${context}/content/repositories/${repo}${resourcePath}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">Gets a resource from Nexus as content</stringProp>
              </HTTPSampler2>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="HEAD Resource" enabled="true"/>
            <hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="HEAD Resource" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${context}/content/repositories/${repo}${resourcePath}</stringProp>
                <stringProp name="HTTPSampler.method">HEAD</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">Gets a resource from Nexus as content</stringProp>
              </HTTPSampler2>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MSE artifacts.xml" enabled="true"/>
            <hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="/nexus/content/repositories/nx-mse/artifacts.xml HEAD" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/nexus/content/repositories/nx-mse/artifacts.xml</stringProp>
                <stringProp name="HTTPSampler.method">HEAD</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSampler2>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="/nexus/content/repositories/nx-mse/artifacts.xml GET" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/nexus/content/repositories/nx-mse/artifacts.xml</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSampler2>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MSE content.xml" enabled="true"/>
            <hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="/nexus/content/repositories/nx-mse/content.xml HEAD" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/nexus/content/repositories/nx-mse/content.xml</stringProp>
                <stringProp name="HTTPSampler.method">HEAD</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSampler2>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="/nexus/content/repositories/nx-mse/content.xml GET" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/nexus/content/repositories/nx-mse/content.xml</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSampler2>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MSE Metadata" enabled="true">
              <stringProp name="TestPlan.comments">Simulated Fetch of content metadata that Eclipse requests when determining the features available in a P2 Repo</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="/nexus/content/repositories/nx-mse/p2.index" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/nexus/content/repositories/nx-mse/p2.index</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSampler2>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 404" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="51512">404</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="/nexus/content/repositories/nx-mse/content.jar HEAD" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/nexus/content/repositories/nx-mse/content.jar</stringProp>
                <stringProp name="HTTPSampler.method">HEAD</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSampler2>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 404" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="51512">404</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="MSE content.xml" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="2108044882">Common Modules</stringProp>
                  <stringProp name="-1678783399">Content</stringProp>
                  <stringProp name="-2016914040">Repositories</stringProp>
                  <stringProp name="1781123553">MSE content.xml</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MSE Install 1.8.0.1" enabled="true">
              <stringProp name="TestPlan.comments">Simulated Install of MSE into Eclipse</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="/nexus/content/repositories/nx-mse/p2.index" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/nexus/content/repositories/nx-mse/p2.index</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSampler2>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 404" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="51512">404</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="/nexus/content/repositories/nx-mse/artifacts.jar" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/nexus/content/repositories/nx-mse/artifacts.jar</stringProp>
                <stringProp name="HTTPSampler.method">HEAD</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSampler2>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 404" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="51512">404</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="MSE artifacts.xml" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="2108044882">Common Modules</stringProp>
                  <stringProp name="-1678783399">Content</stringProp>
                  <stringProp name="-2016914040">Repositories</stringProp>
                  <stringProp name="12427913">MSE artifacts.xml</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="/nexus/content/repositories/nx-mse/features/com.sonatype.buildserver.eclipse.feature_1.0.2.20101115.jar" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/nexus/content/repositories/nx-mse/features/com.sonatype.buildserver.eclipse.feature_1.0.2.20101115.jar</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSampler2>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="/nexus/content/repositories/nx-mse/features/com.sonatype.s2.project.feature_1.0.7.20101115-1145.jar" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/nexus/content/repositories/nx-mse/features/com.sonatype.s2.project.feature_1.0.7.20101115-1145.jar</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSampler2>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="/nexus/content/repositories/nx-mse/features/com.sonatype.buildserver.bridge.feature_1.0.2.20101115.jar" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/nexus/content/repositories/nx-mse/features/com.sonatype.buildserver.bridge.feature_1.0.2.20101115.jar</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSampler2>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="/nexus/content/repositories/nx-mse/features/com.sonatype.s2.project.cvs.feature_1.0.7.20101115-1145.jar" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/nexus/content/repositories/nx-mse/features/com.sonatype.s2.project.cvs.feature_1.0.7.20101115-1145.jar</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSampler2>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="/nexus/content/repositories/nx-mse/features/com.sonatype.s2.project.git.feature_1.0.7.20101115-1145.jar" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/nexus/content/repositories/nx-mse/features/com.sonatype.s2.project.git.feature_1.0.7.20101115-1145.jar</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSampler2>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="/nexus/content/repositories/nx-mse/features/com.sonatype.s2.project.svn.feature_1.0.7.20101115-1145.jar" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/nexus/content/repositories/nx-mse/features/com.sonatype.s2.project.svn.feature_1.0.7.20101115-1145.jar</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSampler2>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="/nexus/content/repositories/nx-mse/features/org.eclipse.egit_0.9.3.jar" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/nexus/content/repositories/nx-mse/features/org.eclipse.egit_0.9.3.jar</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSampler2>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="/nexus/content/repositories/nx-mse/features/org.eclipse.team.svn_0.7.9.I20100917-1700.jar" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/nexus/content/repositories/nx-mse/features/org.eclipse.team.svn_0.7.9.I20100917-1700.jar</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSampler2>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="/nexus/content/repositories/nx-mse/features/org.maven.ide.eclipse.feature_0.12.20101114.jar" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/nexus/content/repositories/nx-mse/features/org.maven.ide.eclipse.feature_0.12.20101114.jar</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSampler2>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="/nexus/content/repositories/nx-mse/features/org.maven.ide.eclipse.temporary.mojos.feature_0.12.0.20101103-1500.jar" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/nexus/content/repositories/nx-mse/features/org.maven.ide.eclipse.temporary.mojos.feature_0.12.0.20101103-1500.jar</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSampler2>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="/nexus/content/repositories/nx-mse/features/org.eclipse.jgit_0.9.3.jar" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/nexus/content/repositories/nx-mse/features/org.eclipse.jgit_0.9.3.jar</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSampler2>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="/nexus/content/repositories/nx-mse/features/org.polarion.eclipse.team.svn.connector_2.2.2.I20101001-1700.jar" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/nexus/content/repositories/nx-mse/features/org.polarion.eclipse.team.svn.connector_2.2.2.I20101001-1700.jar</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSampler2>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="/nexus/content/repositories/nx-mse/features/org.polarion.eclipse.team.svn.connector.svnkit16_2.2.2.I20100917-1700.jar" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/nexus/content/repositories/nx-mse/features/org.polarion.eclipse.team.svn.connector.svnkit16_2.2.2.I20100917-1700.jar</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSampler2>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="EXAMPLES" enabled="true"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="mse install loop" enabled="true"/>
              <hashTree>
                <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="false">
                  <boolProp name="LoopController.continue_forever">true</boolProp>
                  <intProp name="LoopController.loops">-1</intProp>
                </LoopController>
                <hashTree>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="mse.csv" enabled="true">
                    <stringProp name="delimiter">,</stringProp>
                    <stringProp name="fileEncoding">${fileEncoding}</stringProp>
                    <stringProp name="filename">${data.dir}/mse.csv</stringProp>
                    <stringProp name="quotedData">${csvAllowQuotedData}</stringProp>
                    <stringProp name="recycle">${csvRecycleOnEOF}</stringProp>
                    <stringProp name="shareMode">Current thread</stringProp>
                    <stringProp name="stopThread">${csvStopOnEOF}</stringProp>
                    <stringProp name="variableNames">resourcePath,httpMethod</stringProp>
                    <stringProp name="TestPlan.comments">resourcePaths for the resources to get to simulate a complete Eclipse MSE installation</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If HEAD" enabled="true">
                    <stringProp name="IfController.condition">${__jexl(&quot;HEAD&quot; == &quot;${__log(${httpMethod},,,)}&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="HEAD Resource" enabled="true">
                      <stringProp name="TestPlan.comments">Use module controllers to reference common modules</stringProp>
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="764597751">Test Plan</stringProp>
                        <stringProp name="2108044882">Common Modules</stringProp>
                        <stringProp name="-1678783399">Content</stringProp>
                        <stringProp name="-2016914040">Repositories</stringProp>
                        <stringProp name="1365433966">HEAD Resource</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If GET" enabled="true">
                    <stringProp name="IfController.condition"> ${__jexl(&quot;GET&quot; == &quot;${__log(${httpMethod},,,)}&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="GET Resource" enabled="true">
                      <stringProp name="TestPlan.comments">Use module controllers to reference common modules</stringProp>
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="764597751">Test Plan</stringProp>
                        <stringProp name="2108044882">Common Modules</stringProp>
                        <stringProp name="-1678783399">Content</stringProp>
                        <stringProp name="-2016914040">Repositories</stringProp>
                        <stringProp name="-468307496">GET Resource</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Service" enabled="true">
          <stringProp name="TestPlan.comments">/nexus/service</stringProp>
        </GenericController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Authentication" enabled="true">
            <stringProp name="TestPlan.comments">/nexus/service/local/authentication</stringProp>
          </GenericController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Login" enabled="true"/>
            <hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="Login" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${context}/service/local/authentication/login</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSampler2>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Logout" enabled="true"/>
            <hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="Logout" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${context}/service/local/authentication/logout</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSampler2>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Dependency" enabled="true">
            <stringProp name="TestPlan.comments">/nexus/service/local/dependency</stringProp>
          </GenericController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GET JSON" enabled="true"/>
            <hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="GET JSON" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="_dc" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${_dc}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_dc</stringProp>
                    </elementProp>
                    <elementProp name="g" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${g}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">g</stringProp>
                    </elementProp>
                    <elementProp name="a" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${a}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">a</stringProp>
                    </elementProp>
                    <elementProp name="v" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${v}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">v</stringProp>
                    </elementProp>
                    <elementProp name="c" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${c}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">c</stringProp>
                    </elementProp>
                    <elementProp name="e" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${e}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">e</stringProp>
                    </elementProp>
                    <elementProp name="s" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${s}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">s</stringProp>
                    </elementProp>
                    <elementProp name="f" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${f}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">f</stringProp>
                    </elementProp>
                    <elementProp name="r" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${r}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">r</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${context}/service/local/dependency</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">http://localhost:8081/nexus/service/local/dependency?_dc=1288027967376&amp;g=org.sonatype.nexus&amp;a=nexus-oss-webapp&amp;v=1.6.0&amp;c=&amp;e=pom&amp;s=compile&amp;f=tree&amp;r=public</stringProp>
              </HTTPSampler2>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="AJAX JSON Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.2.11) Gecko/20101012 Firefox/3.6.11</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-us,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip,deflate</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Charset</stringProp>
                      <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.7</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">Headers that are typically sent from a user&apos;s web browser to Nexus backend</stringProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GET XML" enabled="true"/>
            <hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="GET XML" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="_dc" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${_dc}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_dc</stringProp>
                    </elementProp>
                    <elementProp name="g" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${g}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">g</stringProp>
                    </elementProp>
                    <elementProp name="a" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${a}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">a</stringProp>
                    </elementProp>
                    <elementProp name="v" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${v}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">v</stringProp>
                    </elementProp>
                    <elementProp name="c" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${c}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">c</stringProp>
                    </elementProp>
                    <elementProp name="e" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${e}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">e</stringProp>
                    </elementProp>
                    <elementProp name="s" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${s}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">s</stringProp>
                    </elementProp>
                    <elementProp name="f" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${f}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">f</stringProp>
                    </elementProp>
                    <elementProp name="r" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${r}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">r</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${context}/service/local/dependency</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">http://localhost:8081/nexus/service/local/dependency?_dc=1288027967376&amp;g=org.sonatype.nexus&amp;a=nexus-oss-webapp&amp;v=1.6.0&amp;c=&amp;e=pom&amp;s=compile&amp;f=tree&amp;r=public</stringProp>
              </HTTPSampler2>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="AJAX XML Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/xml</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.2.11) Gecko/20101012 Firefox/3.6.11</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-us,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip,deflate</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Charset</stringProp>
                      <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.7</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">Headers that are typically sent from a user&apos;s web browser to Nexus backend</stringProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Feeds" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="All Alpha" enabled="true">
              <stringProp name="TestPlan.comments">all feeds in alpha order</stringProp>
            </GenericController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GET authcAuthz" enabled="true"/>
              <hashTree>
                <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="GET authcAuthz" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${context}/service/local/feeds/authcAuthz</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSampler2>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Feed Headers" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GET brokenArtifacts" enabled="true"/>
              <hashTree>
                <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="GET brokenArtifacts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${context}/service/local/feeds/brokenArtifacts</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSampler2>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Feed Headers" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GET brokenFiles" enabled="true"/>
              <hashTree>
                <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="GET brokenFiles" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${context}/service/local/feeds/brokenFiles</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSampler2>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Feed Headers" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GET errorWarning" enabled="true"/>
              <hashTree>
                <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="GET errorWarning" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${context}/service/local/feeds/errorWarning</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSampler2>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Feed Headers" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GET recentlyCachedArtifacts" enabled="true"/>
              <hashTree>
                <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="GET recentlyCachedArtifacts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${context}/service/local/feeds/recentlyCachedArtifacts</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSampler2>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Feed Headers" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GET recentlyCachedOrDeployedArtifacts" enabled="true"/>
              <hashTree>
                <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="GET recentlyCachedOrDeployedArtifacts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${context}/service/local/feeds/recentlyCachedOrDeployedArtifacts</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSampler2>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Feed Headers" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GET recentlyCachedFiles" enabled="true"/>
              <hashTree>
                <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="GET recentlyCachedFiles" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${context}/service/local/feeds/recentlyCachedFiles</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSampler2>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Feed Headers" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GET recentlyCachedOrDeployedFiles" enabled="true"/>
              <hashTree>
                <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="GET recentlyCachedOrDeployedFiles" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${context}/service/local/feeds/recentlyCachedOrDeployedFiles</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSampler2>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Feed Headers" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GET recentlyCachedOrDeployedReleaseArtifacts" enabled="true"/>
              <hashTree>
                <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="GET recentlyCachedOrDeployedReleaseArtifacts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${context}/service/local/feeds/recentlyCachedOrDeployedReleaseArtifacts</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSampler2>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Feed Headers" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GET recentlyCachedReleaseArtifacts" enabled="true"/>
              <hashTree>
                <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="GET recentlyCachedReleaseArtifacts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${context}/service/local/feeds/recentlyCachedReleaseArtifacts</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSampler2>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Feed Headers" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GET recentlyChangedArtifacts" enabled="true"/>
              <hashTree>
                <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="GET recentlyChangedArtifacts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${context}/service/local/feeds/recentlyChangedArtifacts</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSampler2>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Feed Headers" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GET recentlyChangedFiles" enabled="true"/>
              <hashTree>
                <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="GET recentlyChangedFiles" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${context}/service/local/feeds/recentlyChangedFiles</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSampler2>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Feed Headers" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GET recentlyChangedReleaseArtifacts" enabled="true"/>
              <hashTree>
                <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="GET recentlyChangedReleaseArtifacts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${context}/service/local/feeds/recentlyChangedReleaseArtifacts</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSampler2>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Feed Headers" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GET recentlyDeployedArtifacts" enabled="true"/>
              <hashTree>
                <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="GET recentlyDeployedArtifacts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${context}/service/local/feeds/recentlyDeployedArtifacts</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSampler2>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Feed Headers" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GET recentlyDeployedFiles" enabled="true"/>
              <hashTree>
                <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="GET recentlyDeployedFiles" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${context}/service/local/feeds/recentlyDeployedFiles</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSampler2>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Feed Headers" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GET recentlyDeployedReleaseArtifacts" enabled="true"/>
              <hashTree>
                <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="GET recentlyDeployedReleaseArtifacts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${context}/service/local/feeds/recentlyDeployedReleaseArtifacts</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSampler2>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Feed Headers" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GET systemChanges" enabled="true"/>
              <hashTree>
                <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="GET systemChanges" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${context}/service/local/feeds/systemChanges</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSampler2>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Feed Headers" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GET systemRepositoryStatusChanges" enabled="true"/>
              <hashTree>
                <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="GET systemRepositoryStatusChanges" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${context}/service/local/feeds/systemRepositoryStatusChanges</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSampler2>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Feed Headers" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <InterleaveControl guiclass="InterleaveControlGui" testclass="InterleaveControl" testname="All Interleave Alpha" enabled="true">
              <stringProp name="TestPlan.comments">interleave among all the known feeds</stringProp>
              <intProp name="InterleaveControl.style">1</intProp>
            </InterleaveControl>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="All" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="2108044882">Common Modules</stringProp>
                  <stringProp name="-646160747">Service</stringProp>
                  <stringProp name="67755637">Feeds</stringProp>
                  <stringProp name="65139167">All Alpha</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="All Interleave Random" enabled="true">
              <stringProp name="TestPlan.comments">Like Interleave except selection of sub modules is random</stringProp>
              <intProp name="InterleaveControl.style">1</intProp>
            </RandomController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="All" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="2108044882">Common Modules</stringProp>
                  <stringProp name="-646160747">Service</stringProp>
                  <stringProp name="67755637">Feeds</stringProp>
                  <stringProp name="65139167">All Alpha</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="All Random Order" enabled="true">
              <stringProp name="TestPlan.comments">Like Simple Controller, except will execute each child element at most once, but the order of execution of the nodes will be random</stringProp>
            </RandomOrderController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="All" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="2108044882">Common Modules</stringProp>
                  <stringProp name="-646160747">Service</stringProp>
                  <stringProp name="67755637">Feeds</stringProp>
                  <stringProp name="65139167">All Alpha</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="System Alpha" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="GET authcAuthz" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="2108044882">Common Modules</stringProp>
                  <stringProp name="-646160747">Service</stringProp>
                  <stringProp name="67755637">Feeds</stringProp>
                  <stringProp name="65139167">All Alpha</stringProp>
                  <stringProp name="-1608911871">GET authcAuthz</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="GET errorWarning" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="2108044882">Common Modules</stringProp>
                  <stringProp name="-646160747">Service</stringProp>
                  <stringProp name="67755637">Feeds</stringProp>
                  <stringProp name="65139167">All Alpha</stringProp>
                  <stringProp name="110215454">GET errorWarning</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="GET systemChanges" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="2108044882">Common Modules</stringProp>
                  <stringProp name="-646160747">Service</stringProp>
                  <stringProp name="67755637">Feeds</stringProp>
                  <stringProp name="65139167">All Alpha</stringProp>
                  <stringProp name="-2011171286">GET systemChanges</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="GET systemRepositoryStatusChanges" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="2108044882">Common Modules</stringProp>
                  <stringProp name="-646160747">Service</stringProp>
                  <stringProp name="67755637">Feeds</stringProp>
                  <stringProp name="65139167">All Alpha</stringProp>
                  <stringProp name="-812443474">GET systemRepositoryStatusChanges</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Lucene" enabled="true">
            <stringProp name="TestPlan.comments">/nexus/service/local/lucene</stringProp>
          </GenericController>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Repositories" enabled="true">
            <stringProp name="TestPlan.comments">nexus/service/local/repositories</stringProp>
          </GenericController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Content" enabled="true">
              <stringProp name="TestPlan.comments">/nexus/service/local/repositories/*reponame*/content/ lists the content of a repository, data consumable in the browse storage view</stringProp>
            </GenericController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Walk Local Storage Tree" enabled="true">
                <stringProp name="TestPlan.comments">Walk the local storage tree until all nodes have been retrieved</stringProp>
              </GenericController>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="AJAX JSON Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.2.11) Gecko/20101012 Firefox/3.6.11</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-us,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip,deflate</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Charset</stringProp>
                      <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.7</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">Headers that are typically sent from a user&apos;s web browser to Nexus backend</stringProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="root" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="isLocal" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata"></stringProp>
                        <boolProp name="HTTPArgument.use_equals">false</boolProp>
                        <stringProp name="Argument.name">isLocal</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${context}/service/local/repositories/${repoName}/content/</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSampler2>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Paths A" enabled="true">
                    <stringProp name="TestPlan.comments">extract the relativePath values from the JSON so that that they can be looped over</stringProp>
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">pathA</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;relativePath&quot;:&quot;/([\w|/|.|-]+?)/&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NO_RELATIVE_PATH_MATCH</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="Level A" enabled="true">
                  <stringProp name="ForeachController.inputVal">pathA</stringProp>
                  <stringProp name="ForeachController.returnVal">pathA</stringProp>
                  <boolProp name="ForeachController.useSeparator">true</boolProp>
                </ForeachController>
                <hashTree>
                  <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="Level A" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="isLocal" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata"></stringProp>
                          <boolProp name="HTTPArgument.use_equals">false</boolProp>
                          <stringProp name="Argument.name">isLocal</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${context}/service/local/repositories/${repoName}/content/${pathA}/</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSampler2>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49586">200</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Paths B" enabled="true">
                      <stringProp name="TestPlan.comments">extract the relativePath values from the JSON so that that they can be looped over</stringProp>
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">pathB</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;relativePath&quot;:&quot;/([\w|/|.|-]+?)/&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NO_RELATIVE_PATH_MATCH</stringProp>
                      <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="Level B" enabled="true">
                    <stringProp name="ForeachController.inputVal">pathB</stringProp>
                    <stringProp name="ForeachController.returnVal">pathB</stringProp>
                    <boolProp name="ForeachController.useSeparator">true</boolProp>
                  </ForeachController>
                  <hashTree>
                    <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="Level B" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="isLocal" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata"></stringProp>
                            <boolProp name="HTTPArgument.use_equals">false</boolProp>
                            <stringProp name="Argument.name">isLocal</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${context}/service/local/repositories/${repoName}/content/${pathB}/</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSampler2>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="49586">200</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">8</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Paths C" enabled="true">
                        <stringProp name="TestPlan.comments">extract the relativePath values from the JSON so that that they can be looped over</stringProp>
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">pathC</stringProp>
                        <stringProp name="RegexExtractor.regex">&quot;relativePath&quot;:&quot;/([\w|/|.|-]+?)/&quot;,</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">NO_RELATIVE_PATH_MATCH</stringProp>
                        <stringProp name="RegexExtractor.match_number">-1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="Level C" enabled="true">
                      <stringProp name="ForeachController.inputVal">pathC</stringProp>
                      <stringProp name="ForeachController.returnVal">pathC</stringProp>
                      <boolProp name="ForeachController.useSeparator">true</boolProp>
                    </ForeachController>
                    <hashTree>
                      <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="Level C" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="isLocal" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata"></stringProp>
                              <boolProp name="HTTPArgument.use_equals">false</boolProp>
                              <stringProp name="Argument.name">isLocal</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${context}/service/local/repositories/${repoName}/content/${pathC}/</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSampler2>
                      <hashTree>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="49586">200</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">8</intProp>
                        </ResponseAssertion>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Paths D" enabled="true">
                          <stringProp name="TestPlan.comments">extract the relativePath values from the JSON so that that they can be looped over</stringProp>
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">pathD</stringProp>
                          <stringProp name="RegexExtractor.regex">&quot;relativePath&quot;:&quot;/([\w|/|.|-]+?)/&quot;,</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">NO_RELATIVE_PATH_MATCH</stringProp>
                          <stringProp name="RegexExtractor.match_number">-1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                      </hashTree>
                      <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="Level D" enabled="true">
                        <stringProp name="ForeachController.inputVal">pathD</stringProp>
                        <stringProp name="ForeachController.returnVal">pathD</stringProp>
                        <boolProp name="ForeachController.useSeparator">true</boolProp>
                      </ForeachController>
                      <hashTree>
                        <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="Level D" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="isLocal" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata"></stringProp>
                                <boolProp name="HTTPArgument.use_equals">false</boolProp>
                                <stringProp name="Argument.name">isLocal</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${context}/service/local/repositories/${repoName}/content/${pathD}/</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSampler2>
                        <hashTree>
                          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                            <collectionProp name="Asserion.test_strings">
                              <stringProp name="49586">200</stringProp>
                            </collectionProp>
                            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                            <boolProp name="Assertion.assume_success">false</boolProp>
                            <intProp name="Assertion.test_type">8</intProp>
                          </ResponseAssertion>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Paths E" enabled="true">
                            <stringProp name="TestPlan.comments">extract the relativePath values from the JSON so that that they can be looped over</stringProp>
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">pathE</stringProp>
                            <stringProp name="RegexExtractor.regex">&quot;relativePath&quot;:&quot;/([\w|/|.|-]+?)/&quot;,</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default">NO_RELATIVE_PATH_MATCH</stringProp>
                            <stringProp name="RegexExtractor.match_number">-1</stringProp>
                          </RegexExtractor>
                          <hashTree/>
                        </hashTree>
                        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="Level E" enabled="true">
                          <stringProp name="ForeachController.inputVal">pathE</stringProp>
                          <stringProp name="ForeachController.returnVal">pathE</stringProp>
                          <boolProp name="ForeachController.useSeparator">true</boolProp>
                        </ForeachController>
                        <hashTree>
                          <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="Level E" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                              <collectionProp name="Arguments.arguments">
                                <elementProp name="isLocal" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                  <stringProp name="Argument.value"></stringProp>
                                  <stringProp name="Argument.metadata"></stringProp>
                                  <boolProp name="HTTPArgument.use_equals">false</boolProp>
                                  <stringProp name="Argument.name">isLocal</stringProp>
                                </elementProp>
                              </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain"></stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol"></stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${context}/service/local/repositories/${repoName}/content/${pathE}/</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          </HTTPSampler2>
                          <hashTree>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                              <collectionProp name="Asserion.test_strings">
                                <stringProp name="49586">200</stringProp>
                              </collectionProp>
                              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                              <boolProp name="Assertion.assume_success">false</boolProp>
                              <intProp name="Assertion.test_type">8</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Paths F" enabled="true">
                              <stringProp name="TestPlan.comments">extract the relativePath values from the JSON so that that they can be looped over</stringProp>
                              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                              <stringProp name="RegexExtractor.refname">pathF</stringProp>
                              <stringProp name="RegexExtractor.regex">&quot;relativePath&quot;:&quot;/([\w|/|.|-]+?)/&quot;,</stringProp>
                              <stringProp name="RegexExtractor.template">$1$</stringProp>
                              <stringProp name="RegexExtractor.default">NO_RELATIVE_PATH_MATCH</stringProp>
                              <stringProp name="RegexExtractor.match_number">-1</stringProp>
                            </RegexExtractor>
                            <hashTree/>
                          </hashTree>
                          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="Level F" enabled="true">
                            <stringProp name="ForeachController.inputVal">pathF</stringProp>
                            <stringProp name="ForeachController.returnVal">pathF</stringProp>
                            <boolProp name="ForeachController.useSeparator">true</boolProp>
                          </ForeachController>
                          <hashTree>
                            <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="Level F" enabled="true">
                              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                <collectionProp name="Arguments.arguments">
                                  <elementProp name="isLocal" elementType="HTTPArgument">
                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                    <stringProp name="Argument.value"></stringProp>
                                    <stringProp name="Argument.metadata"></stringProp>
                                    <boolProp name="HTTPArgument.use_equals">false</boolProp>
                                    <stringProp name="Argument.name">isLocal</stringProp>
                                  </elementProp>
                                </collectionProp>
                              </elementProp>
                              <stringProp name="HTTPSampler.domain"></stringProp>
                              <stringProp name="HTTPSampler.port"></stringProp>
                              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                              <stringProp name="HTTPSampler.response_timeout"></stringProp>
                              <stringProp name="HTTPSampler.protocol"></stringProp>
                              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                              <stringProp name="HTTPSampler.path">${context}/service/local/repositories/${repoName}/content/${pathF}/</stringProp>
                              <stringProp name="HTTPSampler.method">GET</stringProp>
                              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                              <boolProp name="HTTPSampler.monitor">false</boolProp>
                              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            </HTTPSampler2>
                            <hashTree>
                              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                                <collectionProp name="Asserion.test_strings">
                                  <stringProp name="49586">200</stringProp>
                                </collectionProp>
                                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                                <boolProp name="Assertion.assume_success">false</boolProp>
                                <intProp name="Assertion.test_type">8</intProp>
                              </ResponseAssertion>
                              <hashTree/>
                              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Paths G" enabled="true">
                                <stringProp name="TestPlan.comments">extract the relativePath values from the JSON so that that they can be looped over</stringProp>
                                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                                <stringProp name="RegexExtractor.refname">pathG</stringProp>
                                <stringProp name="RegexExtractor.regex">&quot;relativePath&quot;:&quot;/([\w|/|.|-]+?)/&quot;,</stringProp>
                                <stringProp name="RegexExtractor.template">$1$</stringProp>
                                <stringProp name="RegexExtractor.default">NO_RELATIVE_PATH_MATCH</stringProp>
                                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                              </RegexExtractor>
                              <hashTree/>
                            </hashTree>
                            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="Level G" enabled="true">
                              <stringProp name="ForeachController.inputVal">pathG</stringProp>
                              <stringProp name="ForeachController.returnVal">pathG</stringProp>
                              <boolProp name="ForeachController.useSeparator">true</boolProp>
                            </ForeachController>
                            <hashTree>
                              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="Level G" enabled="true">
                                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                  <collectionProp name="Arguments.arguments">
                                    <elementProp name="isLocal" elementType="HTTPArgument">
                                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                      <stringProp name="Argument.value"></stringProp>
                                      <stringProp name="Argument.metadata"></stringProp>
                                      <boolProp name="HTTPArgument.use_equals">false</boolProp>
                                      <stringProp name="Argument.name">isLocal</stringProp>
                                    </elementProp>
                                  </collectionProp>
                                </elementProp>
                                <stringProp name="HTTPSampler.domain"></stringProp>
                                <stringProp name="HTTPSampler.port"></stringProp>
                                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                <stringProp name="HTTPSampler.protocol"></stringProp>
                                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                <stringProp name="HTTPSampler.path">${context}/service/local/repositories/${repoName}/content/${pathG}/</stringProp>
                                <stringProp name="HTTPSampler.method">GET</stringProp>
                                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                <boolProp name="HTTPSampler.monitor">false</boolProp>
                                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                              </HTTPSampler2>
                              <hashTree>
                                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                                  <collectionProp name="Asserion.test_strings">
                                    <stringProp name="49586">200</stringProp>
                                  </collectionProp>
                                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                                  <boolProp name="Assertion.assume_success">false</boolProp>
                                  <intProp name="Assertion.test_type">8</intProp>
                                </ResponseAssertion>
                                <hashTree/>
                                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Paths H" enabled="true">
                                  <stringProp name="TestPlan.comments">extract the relativePath values from the JSON so that that they can be looped over</stringProp>
                                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                                  <stringProp name="RegexExtractor.refname">pathH</stringProp>
                                  <stringProp name="RegexExtractor.regex">&quot;relativePath&quot;:&quot;/([\w|/|.|-]+?)/&quot;,</stringProp>
                                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                                  <stringProp name="RegexExtractor.default">NO_RELATIVE_PATH_MATCH</stringProp>
                                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                                </RegexExtractor>
                                <hashTree/>
                              </hashTree>
                              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="Level H" enabled="true">
                                <stringProp name="ForeachController.inputVal">pathH</stringProp>
                                <stringProp name="ForeachController.returnVal">pathH</stringProp>
                                <boolProp name="ForeachController.useSeparator">true</boolProp>
                              </ForeachController>
                              <hashTree>
                                <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="Level H" enabled="true">
                                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                    <collectionProp name="Arguments.arguments">
                                      <elementProp name="isLocal" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value"></stringProp>
                                        <stringProp name="Argument.metadata"></stringProp>
                                        <boolProp name="HTTPArgument.use_equals">false</boolProp>
                                        <stringProp name="Argument.name">isLocal</stringProp>
                                      </elementProp>
                                    </collectionProp>
                                  </elementProp>
                                  <stringProp name="HTTPSampler.domain"></stringProp>
                                  <stringProp name="HTTPSampler.port"></stringProp>
                                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.protocol"></stringProp>
                                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                  <stringProp name="HTTPSampler.path">${context}/service/local/repositories/${repoName}/content/${pathH}/</stringProp>
                                  <stringProp name="HTTPSampler.method">GET</stringProp>
                                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                </HTTPSampler2>
                                <hashTree>
                                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                                    <collectionProp name="Asserion.test_strings">
                                      <stringProp name="49586">200</stringProp>
                                    </collectionProp>
                                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                                    <boolProp name="Assertion.assume_success">false</boolProp>
                                    <intProp name="Assertion.test_type">8</intProp>
                                  </ResponseAssertion>
                                  <hashTree/>
                                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Paths I" enabled="true">
                                    <stringProp name="TestPlan.comments">extract the relativePath values from the JSON so that that they can be looped over</stringProp>
                                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                                    <stringProp name="RegexExtractor.refname">pathI</stringProp>
                                    <stringProp name="RegexExtractor.regex">&quot;relativePath&quot;:&quot;/([\w|/|.|-]+?)/&quot;,</stringProp>
                                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                                    <stringProp name="RegexExtractor.default">NO_RELATIVE_PATH_MATCH</stringProp>
                                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                                  </RegexExtractor>
                                  <hashTree/>
                                </hashTree>
                                <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="Level I" enabled="true">
                                  <stringProp name="ForeachController.inputVal">pathI</stringProp>
                                  <stringProp name="ForeachController.returnVal">pathI</stringProp>
                                  <boolProp name="ForeachController.useSeparator">true</boolProp>
                                </ForeachController>
                                <hashTree>
                                  <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="Level I" enabled="true">
                                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                      <collectionProp name="Arguments.arguments">
                                        <elementProp name="isLocal" elementType="HTTPArgument">
                                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                          <stringProp name="Argument.value"></stringProp>
                                          <stringProp name="Argument.metadata"></stringProp>
                                          <boolProp name="HTTPArgument.use_equals">false</boolProp>
                                          <stringProp name="Argument.name">isLocal</stringProp>
                                        </elementProp>
                                      </collectionProp>
                                    </elementProp>
                                    <stringProp name="HTTPSampler.domain"></stringProp>
                                    <stringProp name="HTTPSampler.port"></stringProp>
                                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                    <stringProp name="HTTPSampler.protocol"></stringProp>
                                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                    <stringProp name="HTTPSampler.path">${context}/service/local/repositories/${repoName}/content/${pathI}/</stringProp>
                                    <stringProp name="HTTPSampler.method">GET</stringProp>
                                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                  </HTTPSampler2>
                                  <hashTree>
                                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                                      <collectionProp name="Asserion.test_strings">
                                        <stringProp name="49586">200</stringProp>
                                      </collectionProp>
                                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                                      <boolProp name="Assertion.assume_success">false</boolProp>
                                      <intProp name="Assertion.test_type">8</intProp>
                                    </ResponseAssertion>
                                    <hashTree/>
                                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Paths J" enabled="true">
                                      <stringProp name="TestPlan.comments">extract the relativePath values from the JSON so that that they can be looped over</stringProp>
                                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                                      <stringProp name="RegexExtractor.refname">pathJ</stringProp>
                                      <stringProp name="RegexExtractor.regex">&quot;relativePath&quot;:&quot;/([\w|/|.|-]+?)/&quot;,</stringProp>
                                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                                      <stringProp name="RegexExtractor.default">NO_RELATIVE_PATH_MATCH</stringProp>
                                      <stringProp name="RegexExtractor.match_number">-1</stringProp>
                                    </RegexExtractor>
                                    <hashTree/>
                                  </hashTree>
                                  <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="Level J" enabled="true">
                                    <stringProp name="ForeachController.inputVal">pathJ</stringProp>
                                    <stringProp name="ForeachController.returnVal">pathJ</stringProp>
                                    <boolProp name="ForeachController.useSeparator">true</boolProp>
                                  </ForeachController>
                                  <hashTree>
                                    <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="Level J" enabled="true">
                                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                        <collectionProp name="Arguments.arguments">
                                          <elementProp name="isLocal" elementType="HTTPArgument">
                                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                            <stringProp name="Argument.value"></stringProp>
                                            <stringProp name="Argument.metadata"></stringProp>
                                            <boolProp name="HTTPArgument.use_equals">false</boolProp>
                                            <stringProp name="Argument.name">isLocal</stringProp>
                                          </elementProp>
                                        </collectionProp>
                                      </elementProp>
                                      <stringProp name="HTTPSampler.domain"></stringProp>
                                      <stringProp name="HTTPSampler.port"></stringProp>
                                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                      <stringProp name="HTTPSampler.protocol"></stringProp>
                                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                      <stringProp name="HTTPSampler.path">${context}/service/local/repositories/${repoName}/content/${pathJ}/</stringProp>
                                      <stringProp name="HTTPSampler.method">GET</stringProp>
                                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                    </HTTPSampler2>
                                    <hashTree>
                                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                                        <collectionProp name="Asserion.test_strings">
                                          <stringProp name="49586">200</stringProp>
                                        </collectionProp>
                                        <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                                        <boolProp name="Assertion.assume_success">false</boolProp>
                                        <intProp name="Assertion.test_type">8</intProp>
                                      </ResponseAssertion>
                                      <hashTree/>
                                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Paths J" enabled="true">
                                        <stringProp name="TestPlan.comments">extract the relativePath values from the JSON so that that they can be looped over</stringProp>
                                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                                        <stringProp name="RegexExtractor.refname">pathJ</stringProp>
                                        <stringProp name="RegexExtractor.regex">&quot;relativePath&quot;:&quot;/([\w|/|.|-]+?)/&quot;,</stringProp>
                                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                                        <stringProp name="RegexExtractor.default">NO_RELATIVE_PATH_MATCH</stringProp>
                                        <stringProp name="RegexExtractor.match_number">-1</stringProp>
                                      </RegexExtractor>
                                      <hashTree/>
                                    </hashTree>
                                  </hashTree>
                                </hashTree>
                              </hashTree>
                            </hashTree>
                          </hashTree>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="isLocal" enabled="true"/>
              <hashTree>
                <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="isLocal" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="isLocal" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata"></stringProp>
                        <boolProp name="HTTPArgument.use_equals">false</boolProp>
                        <stringProp name="Argument.name">isLocal</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${context}/service/local/repositories/${repoName}/content${path}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">content path must be surrounded by / or be a single /</stringProp>
                </HTTPSampler2>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="AJAX JSON Headers" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.2.11) Gecko/20101012 Firefox/3.6.11</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-us,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip,deflate</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Charset</stringProp>
                        <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.7</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                    </collectionProp>
                    <stringProp name="TestPlan.comments">Headers that are typically sent from a user&apos;s web browser to Nexus backend</stringProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="isRemote" enabled="true"/>
              <hashTree>
                <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="isRemote" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="isRemote" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata"></stringProp>
                        <boolProp name="HTTPArgument.use_equals">false</boolProp>
                        <stringProp name="Argument.name">isRemote</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${context}/service/local/repositories/${repoName}/content{$path}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">content path must be surrounded by / or be a single /</stringProp>
                </HTTPSampler2>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="AJAX JSON Headers" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.2.11) Gecko/20101012 Firefox/3.6.11</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-us,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip,deflate</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Charset</stringProp>
                        <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.7</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                    </collectionProp>
                    <stringProp name="TestPlan.comments">Headers that are typically sent from a user&apos;s web browser to Nexus backend</stringProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Repo Groups" enabled="true">
            <stringProp name="TestPlan.comments">nexus/service/local/repo_groups</stringProp>
          </GenericController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Content" enabled="true">
              <stringProp name="TestPlan.comments">/nexus/service/local/repo_groups/*reponame*/content/ lists the content of a repository group</stringProp>
            </GenericController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="isLocal" enabled="true"/>
              <hashTree>
                <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="isLocal" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="isLocal" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata"></stringProp>
                        <boolProp name="HTTPArgument.use_equals">false</boolProp>
                        <stringProp name="Argument.name">isLocal</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${context}/service/local/repo_groups/${groupName}/content${path}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSampler2>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="AJAX JSON Headers" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.2.11) Gecko/20101012 Firefox/3.6.11</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-us,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip,deflate</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Charset</stringProp>
                        <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.7</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                    </collectionProp>
                    <stringProp name="TestPlan.comments">Headers that are typically sent from a user&apos;s web browser to Nexus backend</stringProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Users" enabled="true">
            <stringProp name="TestPlan.comments">/nexus/service/local/users</stringProp>
          </GenericController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Dynamic Delete" enabled="true">
              <stringProp name="TestPlan.comments">Uses a counter reference to dynamically delete users</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="Delete" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${context}/service/local/users/user${__threadNum}-${deleteUserCount}</stringProp>
                <stringProp name="HTTPSampler.method">DELETE</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSampler2>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="AJAX JSON Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.2.11) Gecko/20101012 Firefox/3.6.11</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-us,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip,deflate</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Charset</stringProp>
                      <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.7</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">Headers that are typically sent from a user&apos;s web browser to Nexus backend</stringProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 204 404" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1443488270">204|404</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                  <stringProp name="TestPlan.comments">204 if user exists, 404 if we have not created user yet</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Dynamic Create  &lt; 1.9" enabled="true">
              <stringProp name="TestPlan.comments">use a counter reference to dynamically create users for versions of Nexus &lt; 1.9</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="Create &lt; 1.9" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;data&quot;:{&quot;userId&quot;:&quot;user${__threadNum}-${createUserCount}&quot;,&quot;name&quot;:&quot;name${createUserCount}&quot;,&quot;email&quot;:&quot;fake@sonatype.org&quot;,&quot;status&quot;:&quot;active&quot;,&quot;password&quot;:&quot;123&quot;,&quot;roles&quot;:[&quot;admin&quot;]}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${context}/service/local/users</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">using counter function to create a dynamic set of users per global counter</stringProp>
              </HTTPSampler2>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="AJAX JSON Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.2.11) Gecko/20101012 Firefox/3.6.11</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-us,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip,deflate</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Charset</stringProp>
                      <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.7</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">Headers that are typically sent from a user&apos;s web browser to Nexus backend</stringProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 201" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49587">201</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Dynamic Create  &gt;= 1.9" enabled="true">
              <stringProp name="TestPlan.comments">use a counter reference to dynamically create users for versions of Nexus &gt;= 1.9</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="Create &gt;= 1.9" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;data&quot;:{&quot;userId&quot;:&quot;user${__threadNum}-${createUserCount}&quot;,&quot;firstName&quot;:&quot;first${createUserCount}&quot;,&quot;lastName&quot;:&quot;last${createUserCount}&quot;,&quot;email&quot;:&quot;fake@sonatype.org&quot;,&quot;status&quot;:&quot;active&quot;,&quot;password&quot;:&quot;123&quot;,&quot;roles&quot;:[&quot;admin&quot;]}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${context}/service/local/users</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">using counter function to create a dynamic set of users per global counter</stringProp>
              </HTTPSampler2>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="AJAX JSON Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.2.11) Gecko/20101012 Firefox/3.6.11</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-us,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip,deflate</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Charset</stringProp>
                      <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.7</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">Headers that are typically sent from a user&apos;s web browser to Nexus backend</stringProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 201" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49587">201</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
