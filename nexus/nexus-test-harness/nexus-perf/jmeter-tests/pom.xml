
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.sonatype.nexus</groupId>
    <artifactId>nexus-perf</artifactId>
    <version>1.9-SNAPSHOT</version>
  </parent>
  <groupId>org.sonatype.nexus</groupId>
  <artifactId>jmeter-tests</artifactId>
  <packaging>pom</packaging>
  <name>jmeter-tests</name>
  <description></description>

  <properties>
    <!-- Below is the "product", the subject of the tests -->
    <product-groupId>org.sonatype.nexus</product-groupId>
    <product-artifactId>nexus-oss-webapp</product-artifactId>
    <product-version>${project.version}</product-version>
    <product-classifier>bundle</product-classifier>
    <product-type>tar.gz</product-type>
    <product-control.script></product-control.script>

<!--
     For each test run there are several key directories
     perf.history.dir = where the history of each jmeter test execution is backed up, unique per test profile.
         The default value is only suitable for testing and should be overridden on the ci machine.
     perf.results.dir = where plan output (jtl,logs) of the specific jmeter test execution is written during the execution
         We cannot control where the default output file is located by chronos plugin. It's in target/chronos.
     perf.data.dir = where the datasets (csv data files) for the specific test plan execution can be found. Remember any included with the test plan package
         are defaults
     perf.data.id  = unique id per Maven 'dataset' profile used by the test execution. chronos plugin uses this as 'dataid'
     -->
    <!-- don't change these -->
    <perf.history.dir>${project.build.directory}/test-plan-history/nexus/${project.version}</perf.history.dir>
    <perf.result.dir>${project.build.directory}/test-result</perf.result.dir>
    <perf.data.dir>${project.build.directory}/test-resources</perf.data.dir>

    <!--  customize these -->
    <perf.data.id>EXAMPLE_DATA_ID</perf.data.id>
    <perf.testplan>EXAMPLE_PLAN_NAME.jmx</perf.testplan>
    <!-- these apply when installing jmeter during the build -->
    <jmeter.version>2.4</jmeter.version>
    <jmeter.packaging>tgz</jmeter.packaging>

    <!-- jmeter runtime cruft -->
    <jmeter.loggc>${perf.result.dir}/gclog-${perf.data.id}.log</jmeter.loggc>
    <jmeter.test.dir>${perf.data.dir}</jmeter.test.dir>
    <jmeter.test.file>${jmeter.test.dir}/${perf.testplan}</jmeter.test.file>
    <jmeter.log.file>${perf.result.dir}/performance-${perf.data.id}.jtl</jmeter.log.file>
    <jmeter.stdout.file>${perf.result.dir}/jmeter-stdout-${perf.data.id}.txt</jmeter.stdout.file>
    <jmeter.runlog.file>${perf.result.dir}/jmeter-runlog-${perf.data.id}.log</jmeter.runlog.file>
    <jmeter.resultproperty.file>${perf.result.dir}/jmeter-result-${perf.data.id}.txt</jmeter.resultproperty.file>

    <!-- standard JVM tweaks for running each test. These seem to work pretty well in most cases -->
    <jmeter.jvmargs>-server -Djava.awt.headless=true -Xms756m -Xmx756m
      -XX:NewSize=256m
      -XX:MaxNewSize=256m -XX:SurvivorRatio=8
      -XX:MaxTenuringThreshold=2
      -XX:PermSize=192m -XX:MaxPermSize=192m
      -XX:+UseParallelGC
      -XX:+UseParallelOldGC
      -Dsun.rmi.dgc.client.gcInterval=600000</jmeter.jvmargs>
    <!-- specify additional JVM system properties using -D that can be referenced by the test plan as User Defined Variables. These will be in addition to the standard
    ones so that is why it is blank. -->
    <jmeter.jvmprops></jmeter.jvmprops>
    <!-- Other nexus standard jmeter test plan properties -->
    <nexus.host>localhost</nexus.host>
    <nexus.context>/nexus</nexus.context>
    <nexus.protocol>http</nexus.protocol>
    <!-- port is randomized by NTEMP plugin under normal conditions -->
    <!-- <nexus-application-port>8081</nexus-application-port> -->
  </properties>

  <!--
  Steps to deploy Nexus and run a Test
  ** We only perform tests on bundles **
  ** CI Job takes care of parsing jtl files and failing if required **
  ** our only goal here is to install Nexus and run a test against it **
  CI Step 1 - mvn
  1. Download and extract Nexus bundle using NTEMP plugin. Each test execution profile can customize the NTEMP config
     to install optional plugins as needed.
  2. Extract any test scope Nexus config dependencies on top of the extracted Nexus bundle (optional, specified by execution profile)
  3. Extract the jmeter-plans that the test execution depends on. Plans are regular test scope dependencies, extracted using dependency plugin.
  4. (Optional) Download and install JMeter binaries to the target directory. If test is being executed by the grid, this will be skipped if the
     JMeter binaries are already located in the expected location.
  CI Step 2 - shell
  5. Execute Nexus using exec-plugin,forked,jsw script
  6. Sleep xxx seconds waiting for Nexus to startup, proceed when get 200 response
  7. (TODO) Check Nexus logs for errors, if any fail build before running tests
  CI Step 3 - mvn
  8. Run jmeter extracted test plan/dataset using chronos plugin, perform cehcks recording to jtl files the output
  9. Check Nexus logs for any errors(??)
  CI Step 4 - shell
  10. Shutdown Nexus using exec-plugin, forked, jsw-script
  11. Backup test run logs to history dir
  12. Hudson Performance plugin fails build if outside acceptable params
   -->

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>2.4.3</version>
          <executions>
            <!--  ntemp plugin hijacks target/test-classes so copy test plan resources to another directory -->
            <execution>
              <id>copy-test-plan-resources</id>
              <phase>generate-test-resources</phase>
              <goals>
                <goal>copy-resources</goal>
              </goals>
              <configuration>
                <outputDirectory>${perf.data.dir}</outputDirectory>
                <resources>
                  <resource>
                    <directory>src/perf/test-plan</directory>
                    <filtering>false</filtering>
                  </resource>
                </resources>
              </configuration>
            </execution>
            <execution>
              <id>filter-test-plan-resources</id>
              <phase>process-test-resources</phase>
              <goals>
                <goal>copy-resources</goal>
              </goals>
              <configuration>
                <outputDirectory>${perf.data.dir}</outputDirectory>
                <includeEmptyDirs>true</includeEmptyDirs>
                <resources>
                  <resource>
                    <directory>${project.build.directory}/dependency/test-plan</directory>
                    <filtering>true</filtering>
                    <includes>
                      <include>**/*.properties</include>
                    </includes>
                  </resource>
                  <resource>
                    <directory>${project.build.directory}/dependency/test-plan</directory>
                    <filtering>false</filtering>
                    <excludes>
                      <exclude>**/*.properties</exclude>
                    </excludes>
                  </resource>
                </resources>
              </configuration>
            </execution>
            <execution>
              <id>copy-nexus-work-resources</id>
              <phase>generate-test-resources</phase>
              <goals>
                <goal>copy-resources</goal>
              </goals>
              <configuration>
                <outputDirectory>${nexus-work-dir}</outputDirectory>
                <resources>
                  <resource>
                    <directory>src/perf/nexus-work-dir</directory>
                    <filtering>false</filtering>
                  </resource>
                </resources>
              </configuration>
            </execution>
            <execution>
              <id>copy-nexus-base-resources</id>
              <phase>generate-test-resources</phase>
              <goals>
                <goal>copy-resources</goal>
              </goals>
              <configuration>
                <outputDirectory>${nexus-base-dir}</outputDirectory>
                <resources>
                  <resource>
                    <directory>src/perf/nexus-base-dir</directory>
                    <filtering>false</filtering>
                  </resource>
                </resources>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <!-- by default output to the target directory  -->
        <plugin>
          <artifactId>maven-dependency-plugin</artifactId>
          <executions>
            <execution>
              <id>extract-test-plans</id>
              <phase>generate-test-resources</phase>
              <goals>
                <goal>unpack-dependencies</goal>
              </goals>
              <configuration>
                <excludeTransitive>true</excludeTransitive>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <artifactId>maven-antrun-plugin</artifactId>
          <executions>
            <!-- gives oportunity to delete or otherwise modify a default nexus installation -->
            <execution>
              <id>nexus-modify-installation</id>
              <phase>generate-test-resources</phase>
              <goals>
                <goal>run</goal>
              </goals>
              <configuration>
                <target></target>
              </configuration>
            </execution>
            <execution>
              <id>jmeter-exec</id>
              <phase>integration-test</phase>
              <goals>
                <goal>run</goal>
              </goals>
              <configuration>
                <target>
                  <echo>RUNNING TEST: ${perf.data.id}</echo>
                  <mkdir dir="${perf.result.dir}" />
                  <java fork="true" jar="${jmeter.home}/bin/ApacheJMeter.jar" outputProperty="jmeter.stdout" dir="${jmeter.test.dir}" resultproperty="jmeter.resultproperty">
                    <jvmarg value="-Duser.dir=${jmeter.home}/bin" />
                    <jvmarg line="${jmeter.jvmargs}" />
                    <jvmarg value="-verbose:gc" />
                    <jvmarg value="-Xloggc:${jmeter.loggc}" />
                    <!-- standard test plan properties -->
                    <jvmarg value="-Dresult.dir=${perf.result.dir}" />
                    <jvmarg value="-Ddata.dir=${perf.data.dir}" />
                    <jvmarg value="-Ddata.id=${perf.data.id}" />
                    <jvmarg value="-Dnexus.port=${nexus-application-port}" />
                    <jvmarg value="-Dnexus.host=${nexus.host}" />
                    <jvmarg value="-Dnexus.protocol=${nexus.protocol}" />
                    <jvmarg value="-Dnexus.context=${nexus.context}" />
                    <jvmarg value="-Dnexus.repo=${nexus.repo}" />
                    <!-- give runner profiles the opportunity to specify additional user defined variables -->
                    <jvmarg line="${jmeter.jvmprops}" />
                    <!-- nongui -->
                    <arg value="-n" />
                    <!-- specify the test plan jmx -->
                    <arg value="-t" />
                    <arg path="${jmeter.test.file}" />
                    <!-- create performance log file -->
                    <arg value="-l" />
                    <arg path="${jmeter.log.file}" />
                    <!-- where does jmeter.log go? -->
                    <arg value="-j" />
                    <arg path="${jmeter.runlog.file}" />
                  </java>
                  <echo message="${jmeter.stdout}" />
                  <echo file="${jmeter.stdout.file}" encoding="UTF-8" message="${jmeter.stdout}" />
                  <echo file="${jmeter.resultproperty.file}" encoding="UTF-8" message="${jmeter.resultproperty}" />
                </target>
              </configuration>
            </execution>
            <!-- HACK HACK HACK -->
            <execution>
              <id>nexus-executable-fishing</id>
              <!-- make sure this runs after NTEMP plugin due to project properties that plugin sets -->
              <phase>pre-integration-test</phase>
              <goals>
                <goal>run</goal>
              </goals>
              <configuration>
                <target>
                  <condition property="nexus.jsw.dir" value="macosx-universal-64">
                    <and>
                      <contains string="${os.name}" substring="mac os x" casesensitive="false" />
                      <contains string="${os.arch}" substring="64" />
                    </and>
                  </condition>
                  <condition property="nexus.jsw.dir" value="linux-x86-64">
                    <and>
                      <contains string="${os.name}" substring="linux" casesensitive="false" />
                      <contains string="${os.arch}" substring="64" />
                    </and>
                  </condition>
                  <condition property="nexus.jsw.dir" value="linux-x86-32">
                    <and>
                      <contains string="${os.name}" substring="linux" casesensitive="false" />
                      <contains string="${os.arch}" substring="32" />
                    </and>
                  </condition>
                  <echo encoding="UTF-8" file="${project.build.directory}/antrun/nexus.exec">${nexus-base-dir}/bin/jsw/${nexus.jsw.dir}/nexus</echo>
                </target>
              </configuration>
            </execution>
            <execution>
              <id>nexus-start</id>
              <phase>pre-integration-test</phase>
              <goals>
                <goal>run</goal>
              </goals>
              <configuration>
                <target>
                  <loadfile property="nexus.exec" encoding="UTF-8" srcFile="${project.build.directory}/antrun/nexus.exec" />
                  <exec executable="${nexus.exec}" failonerror="true">
                    <arg value="restart" />
                  </exec>
                  <sleep seconds="10" />
                  <!-- TODO add sleep until http check 200 -->
                </target>
              </configuration>
            </execution>
            <execution>
              <id>nexus-stop</id>
              <phase>post-integration-test</phase>
              <goals>
                <goal>run</goal>
              </goals>
              <configuration>
                <target>
                  <loadfile property="nexus.exec" srcFile="${project.build.directory}/antrun/nexus.exec" />
                      <!-- FIXME fail if we can't stop -->
                  <exec executable="${nexus.exec}" failonerror="true">
                    <arg value="stop" />
                  </exec>
                </target>
              </configuration>
            </execution>
            <!-- this must run after nexus is stopped -->
            <execution>
              <id>jmeter-check</id>
              <phase>post-integration-test</phase>
              <goals>
                <goal>run</goal>
              </goals>
              <configuration>
                <target>
                  <fail message="Could not open ${jmeter.test.file}">
                    <condition>
                      <resourcecontains resource="${jmeter.stdout.file}" substring="Could not open " />
                    </condition>
                  </fail>
                  <fail message="Found Exception in ${jmeter.stdout.file}">
                    <condition>
                      <resourcecontains resource="${jmeter.stdout.file}" substring="Exception " />
                    </condition>
                  </fail>
                  <fail message="JMeter log file contains ERROR - see ${jmeter.runlog.file}">
                    <condition>
                      <resourcecontains resource="${jmeter.runlog.file}" substring="ERROR" />
                    </condition>
                  </fail>
                  <fail message="JMeter log file contains ERROR - see ${jmeter.runlog.file}">
                    <condition>
                      <resourcecontains resource="${jmeter.runlog.file}" substring="ERROR" />
                    </condition>
                  </fail>
                  <loadfile property="jmeter.resultpropertyfromfile" srcFile="${jmeter.resultproperty.file}" encoding="UTF-8" />
                  <fail message="JMeter execution returned something other than zero (0)">
                    <condition>
                      <isfailure code="${jmeter.resultpropertyfromfile}" />
                    </condition>
                  </fail>
                </target>
              </configuration>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>

  <profiles>

    <!--  the line endings in the jmeter files change depending on their packaging, therefore they are platform dependent -->
    <profile>
      <id>win</id>
      <activation>
        <os>
          <family>windows</family>
        </os>
      </activation>
      <properties>
        <jmeter.packaging>zip</jmeter.packaging>
      </properties>
    </profile>

    <!--  detect an already installed JMeter binary on build server -->
    <profile>
      <id>jmeter-use-already-installed</id>
      <activation>
        <file>
          <exists>/opt/nexus-perf/README.txt</exists>
        </file>
      </activation>
      <properties>
        <jmeter.home>/opt/nexus-perf/jmeter/jakarta-jmeter-${jmeter.version}</jmeter.home>
      </properties>
    </profile>

    <!-- install jmeter into target dir and run from there, activate this if you don't have your own jmeter install or do not otherwise
    specify jmeter.home location on cmd line -->
    <profile>
      <id>jmeter-install</id>
      <activation>
        <file>
          <!-- works if user does not specify on cmd line jmeter.home -->
          <missing>${jmeter.home}</missing>
        </file>
      </activation>
      <properties>
        <jmeter.unpack.dir>${project.build.directory}</jmeter.unpack.dir>
        <jmeter.home>${jmeter.unpack.dir}/jakarta-jmeter-${jmeter.version}</jmeter.home>
      </properties>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <artifactId>maven-dependency-plugin</artifactId>
              <executions>
                <execution>
                  <id>jmeter-install</id>
                  <phase>initialize</phase>
                  <goals>
                    <goal>unpack</goal>
                  </goals>
                  <configuration>
                    <artifactItems>
                      <artifactItem>
                        <groupId>org.apache.jmeter</groupId>
                        <artifactId>jakarta-jmeter</artifactId>
                        <version>${jmeter.version}</version>
                        <type>${jmeter.packaging}</type>
                        <outputDirectory>${jmeter.unpack.dir}</outputDirectory>
                      </artifactItem>
                    </artifactItems>
                  </configuration>
                </execution>
              </executions>
            </plugin>
          </plugins>
        </pluginManagement>
      </build>
    </profile>

    <!-- we may want to run the test against an already installed and running Nexus -->
    <!-- by default though that is unlikely so this profile active unless we are asked to skip it explicitly -->
    <profile>
      <id>nexus-install</id>
      <activation>
        <property>
          <name>!skipNexusInstall</name>
        </property>
      </activation>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <groupId>org.sonatype.plugins</groupId>
              <artifactId>nexus-test-environment-maven-plugin</artifactId>
              <version>1.6-SNAPSHOT</version>
              <configuration>
                <setupMaven>false</setupMaven>
                <setupEmma>false</setupEmma>
                <nexusBundleArtifact>
                  <groupId>${product-groupId}</groupId>
                  <artifactId>${product-artifactId}</artifactId>
                  <version>${product-version}</version>
                  <type>${product-type}</type>
                  <classifier>${product-classifier}</classifier>
                </nexusBundleArtifact>
              </configuration>
              <executions>
                <execution>
                  <id>unpack-nexus</id>
                  <phase>initialize</phase>
                  <goals>
                    <goal>setup-environment</goal>
                  </goals>
                </execution>
              </executions>
            </plugin>
            <plugin>
              <artifactId>maven-antrun-plugin</artifactId>
              <executions>
                <execution>
                  <id>ntemp-hacks</id>
                  <phase>initialize</phase>
                  <goals>
                    <goal>run</goal>
                  </goals>
                  <configuration>
                    <target>
                <!-- hack because test environment plugin copyies a bad log4j.properties
                  file to nexus work/conf preventing default logging -->
                      <delete verbose="true" file="${nexus-work-dir}/conf/log4j.properties" />
                    </target>
                  </configuration>
                </execution>
              </executions>
            </plugin>
          </plugins>
        </pluginManagement>
      </build>
    </profile>

    <!-- enable this profile plus the profile with your test data whenever you want to execute tests -->
    <profile>
      <id>runPerf</id>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
          </plugin>
          <plugin>
            <artifactId>maven-dependency-plugin</artifactId>
          </plugin>
          <plugin>
            <groupId>org.sonatype.plugins</groupId>
            <artifactId>nexus-test-environment-maven-plugin</artifactId>
          </plugin>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>